/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * APIFlask
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AIConversationOut,
  AIConversationsOut,
  AddDepartmentMemberIn,
  AddDepartmentMemberOut,
  AddTagsIn,
  ArchiveEmailIn,
  ChangeFilePermissionsIn,
  ChangeFilePermissionsOut,
  ChangePasswordIn,
  ChangePasswordOut,
  CheckAvailabilityOut,
  CreateAIConversationInUpdate,
  CreateAnnouncementIn,
  CreateAnnouncementOut,
  CreateDepartmentInUpdate,
  CreateDepartmentOut,
  CreateGroupIn,
  CreateGroupOut,
  CreateUserIn,
  CreateUserOut,
  DeleteAIConversationsOut,
  DeleteAnnouncementOut,
  DeleteGroupOut,
  Department,
  Generated,
  GetAIConversationSettingsOut,
  GetAnnouncementsOut,
  GetApiDepartmentsDepartmentIdMembersParams,
  GetApiDepartmentsParams,
  GetApiEmailsParams,
  GetApiEmailsSearchParams,
  GetApiFileFileIdParams,
  GetApiGroupGroupIdAnnouncementsParams,
  GetApiGroupGroupIdJoinRequestsParams,
  GetApiGroupsParams,
  GetApiManageableJoinRequestsParams,
  GetApiUserCheckAvailabilityParams,
  GetApiUsersParams,
  GetApiUsersSearchParams,
  GetConversationOut,
  GetConversationsOut,
  GetDepartmentMembersOut,
  GetDepartmentsOut,
  GetEmailAccountOut,
  GetEmailsOut,
  GetFriendOut,
  GetFriendRequestsOut,
  GetFriendsOut,
  GetGroupJoinRequestsOut,
  GetGroupMembersOut,
  GetGroupOut,
  GetMessagesOut,
  GetUserGroupsOut,
  GetUsersOut,
  GroupUpdate,
  HTTPError,
  HandleFriendRequestIn,
  HandleFriendRequestOut,
  HandleGroupJoinRequestOut,
  InviteGroupMemberOut,
  LoginByEmailIn,
  LoginIn,
  LoginOut,
  MarkSpamIn,
  MessageOnly,
  PostMessageIn,
  PostMessageOut,
  PutApiJoinRequestRequestIdParams,
  ReceiveEmailIn,
  ReceiveEmailOut,
  RefreshTokenOut,
  ReplyEmailIn,
  ReplyEmailOut,
  SearchEmailsOut,
  SendCodeIn,
  SendCodeOut,
  SendEmailIn,
  SendEmailOut,
  Status,
  SubmitFriendRequestIn,
  SubmitFriendRequestOut,
  SubmitGroupJoinRequestOut,
  TrashEmailIn,
  UpdateAIConversationIn,
  UpdateAIConversationSettingsIn,
  UpdateAIConversationSettingsOut,
  UpdateDepartmentIn,
  UpdateDepartmentMemberRoleIn,
  UpdateDepartmentOut,
  UpdateEmailInUpdate,
  UpdateEmailOut,
  UpdateGroupOut,
  UpdateUserInUpdate,
  UpdateUserOut,
  UploadAvatarIn,
  UploadAvatarOut,
  UploadKnowledgeIn,
  UploadKnowledgeOut,
  User,
  ValidationError
} from './model';





/**
 * @summary Ê≥®ÂÜåÊñ∞Áî®Êà∑
 */
export const postApiUser = (
    createUserIn: CreateUserIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateUserOut>> => {
    
    
    return axios.default.post(
      `/api/user`,
      createUserIn,options
    );
  }



export const getPostApiUserMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUser>>, TError,{data: CreateUserIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUser>>, TError,{data: CreateUserIn}, TContext> => {

const mutationKey = ['postApiUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUser>>, {data: CreateUserIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUserMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUser>>>
    export type PostApiUserMutationBody = CreateUserIn
    export type PostApiUserMutationError = AxiosError<ValidationError>

    /**
 * @summary Ê≥®ÂÜåÊñ∞Áî®Êà∑
 */
export const usePostApiUser = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUser>>, TError,{data: CreateUserIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiUser>>,
        TError,
        {data: CreateUserIn},
        TContext
      > => {

      const mutationOptions = getPostApiUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Êõ¥Êñ∞ÂΩìÂâçÁôªÂΩïÁî®Êà∑‰ø°ÊÅØ
 */
export const putApiUser = (
    updateUserInUpdate: UpdateUserInUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateUserOut>> => {
    
    
    return axios.default.put(
      `/api/user`,
      updateUserInUpdate,options
    );
  }



export const getPutApiUserMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UpdateUserInUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UpdateUserInUpdate}, TContext> => {

const mutationKey = ['putApiUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUser>>, {data: UpdateUserInUpdate}> = (props) => {
          const {data} = props ?? {};

          return  putApiUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUserMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUser>>>
    export type PutApiUserMutationBody = UpdateUserInUpdate
    export type PutApiUserMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥Êñ∞ÂΩìÂâçÁôªÂΩïÁî®Êà∑‰ø°ÊÅØ
 */
export const usePutApiUser = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UpdateUserInUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiUser>>,
        TError,
        {data: UpdateUserInUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÊâÄÊúâÁî®Êà∑ÂàóË°®
 */
export const getApiUsers = (
    params?: GetApiUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersOut>> => {
    
    
    return axios.default.get(
      `/api/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiUsersQueryKey = (params?: GetApiUsersParams,) => {
    return [`/api/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsers>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) => getApiUsers(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâÁî®Êà∑ÂàóË°®
 */

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUsersQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÂàõÂª∫Áæ§ÁªÑ
 */
export const postApiGroup = (
    createGroupIn: CreateGroupIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateGroupOut>> => {
    
    
    return axios.default.post(
      `/api/group`,
      createGroupIn,options
    );
  }



export const getPostApiGroupMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroup>>, TError,{data: CreateGroupIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroup>>, TError,{data: CreateGroupIn}, TContext> => {

const mutationKey = ['postApiGroup'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroup>>, {data: CreateGroupIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiGroup(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroup>>>
    export type PostApiGroupMutationBody = CreateGroupIn
    export type PostApiGroupMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂàõÂª∫Áæ§ÁªÑ
 */
export const usePostApiGroup = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroup>>, TError,{data: CreateGroupIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroup>>,
        TError,
        {data: CreateGroupIn},
        TContext
      > => {

      const mutationOptions = getPostApiGroupMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÂèëÈÄÅ‰∏ÄÂ∞ÅÈÇÆ‰ª∂ÔºàÂèØËÉΩÊúâbugÔºâ
 */
export const postApiEmail = (
    sendEmailIn: SendEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SendEmailOut>> => {
    
    
    return axios.default.post(
      `/api/email`,
      sendEmailIn,options
    );
  }



export const getPostApiEmailMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmail>>, TError,{data: SendEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmail>>, TError,{data: SendEmailIn}, TContext> => {

const mutationKey = ['postApiEmail'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmail>>, {data: SendEmailIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmail>>>
    export type PostApiEmailMutationBody = SendEmailIn
    export type PostApiEmailMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂèëÈÄÅ‰∏ÄÂ∞ÅÈÇÆ‰ª∂ÔºàÂèØËÉΩÊúâbugÔºâ
 */
export const usePostApiEmail = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmail>>, TError,{data: SendEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmail>>,
        TError,
        {data: SendEmailIn},
        TContext
      > => {

      const mutationOptions = getPostApiEmailMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÁî®Êà∑ÁöÑÊâÄÊúâÁæ§ÁªÑ
 */
export const getApiGroups = (
    params?: GetApiGroupsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUserGroupsOut>> => {
    
    
    return axios.default.get(
      `/api/groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiGroupsQueryKey = (params?: GetApiGroupsParams,) => {
    return [`/api/groups`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroups>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiGroupsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroups>>> = ({ signal }) => getApiGroups(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroups>>>
export type GetApiGroupsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÁî®Êà∑ÁöÑÊâÄÊúâÁæ§ÁªÑ
 */

export function useGetApiGroups<TData = Awaited<ReturnType<typeof getApiGroups>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiGroupsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ëé∑ÂèñÊúçÂä°Âô®Áä∂ÊÄÅ
 */
export const getApiHealth = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Status>> => {
    
    
    return axios.default.get(
      `/api/health`,options
    );
  }


export const getGetApiHealthQueryKey = () => {
    return [`/api/health`] as const;
    }

    
export const getGetApiHealthQueryOptions = <TData = Awaited<ReturnType<typeof getApiHealth>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiHealth>>> = ({ signal }) => getApiHealth({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getApiHealth>>>
export type GetApiHealthQueryError = AxiosError<unknown>


/**
 * @summary Ëé∑ÂèñÊúçÂä°Âô®Áä∂ÊÄÅ
 */

export function useGetApiHealth<TData = Awaited<ReturnType<typeof getApiHealth>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiHealthQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * queryÂèÇÊï∞:
- type: all(ÈªòËÆ§)|sent|received - Êü•ËØ¢ÊâÄÊúâ/ÂèëÈÄÅÁöÑ/Êî∂Âà∞ÁöÑÈÇÆ‰ª∂
 * @summary Ëé∑ÂèñÁî®Êà∑ÈÇÆ‰ª∂
 */
export const getApiEmails = (
    params?: GetApiEmailsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetEmailsOut>> => {
    
    
    return axios.default.get(
      `/api/emails`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiEmailsQueryKey = (params?: GetApiEmailsParams,) => {
    return [`/api/emails`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiEmailsQueryOptions = <TData = Awaited<ReturnType<typeof getApiEmails>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiEmailsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmails>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEmailsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEmails>>> = ({ signal }) => getApiEmails(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEmails>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiEmailsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmails>>>
export type GetApiEmailsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÁî®Êà∑ÈÇÆ‰ª∂
 */

export function useGetApiEmails<TData = Awaited<ReturnType<typeof getApiEmails>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiEmailsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmails>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiEmailsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂ•ΩÂèã
 */
export const getApiFriends = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFriendsOut>> => {
    
    
    return axios.default.get(
      `/api/friends`,options
    );
  }


export const getGetApiFriendsQueryKey = () => {
    return [`/api/friends`] as const;
    }

    
export const getGetApiFriendsQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriends>>, TError = AxiosError<HTTPError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriends>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriends>>> = ({ signal }) => getApiFriends({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriends>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiFriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriends>>>
export type GetApiFriendsQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂ•ΩÂèã
 */

export function useGetApiFriends<TData = Awaited<ReturnType<typeof getApiFriends>>, TError = AxiosError<HTTPError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriends>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiFriendsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÂèëÈÄÅÈ™åËØÅÁ†ÅÁî®‰∫éÈÇÆ‰ª∂ÁôªÂΩï
 */
export const postApiAuthCode = (
    sendCodeIn: SendCodeIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SendCodeOut>> => {
    
    
    return axios.default.post(
      `/api/auth/code`,
      sendCodeIn,options
    );
  }



export const getPostApiAuthCodeMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCode>>, TError,{data: SendCodeIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCode>>, TError,{data: SendCodeIn}, TContext> => {

const mutationKey = ['postApiAuthCode'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthCode>>, {data: SendCodeIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthCode(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthCode>>>
    export type PostApiAuthCodeMutationBody = SendCodeIn
    export type PostApiAuthCodeMutationError = AxiosError<ValidationError>

    /**
 * @summary ÂèëÈÄÅÈ™åËØÅÁ†ÅÁî®‰∫éÈÇÆ‰ª∂ÁôªÂΩï
 */
export const usePostApiAuthCode = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCode>>, TError,{data: SendCodeIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthCode>>,
        TError,
        {data: SendCodeIn},
        TContext
      > => {

      const mutationOptions = getPostApiAuthCodeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Áî®Êà∑ÁôªÂΩïËé∑ÂèñËÆøÈóÆ‰ª§Áâå
 */
export const postApiAuthLogin = (
    loginIn: LoginIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoginOut>> => {
    
    
    return axios.default.post(
      `/api/auth/login`,
      loginIn,options
    );
  }



export const getPostApiAuthLoginMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginIn}, TContext> => {

const mutationKey = ['postApiAuthLogin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: LoginIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = LoginIn
    export type PostApiAuthLoginMutationError = AxiosError<ValidationError>

    /**
 * @summary Áî®Êà∑ÁôªÂΩïËé∑ÂèñËÆøÈóÆ‰ª§Áâå
 */
export const usePostApiAuthLogin = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: LoginIn},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ‰∏ä‰º†Â§¥ÂÉè
 */
export const postApiFileAvatar = (
    uploadAvatarIn: UploadAvatarIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadAvatarOut>> => {
    
    const formData = new FormData();
if(uploadAvatarIn.file !== undefined) {
 formData.append(`file`, uploadAvatarIn.file)
 }

    return axios.default.post(
      `/api/file/avatar`,
      formData,options
    );
  }



export const getPostApiFileAvatarMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileAvatar>>, TError,{data: UploadAvatarIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiFileAvatar>>, TError,{data: UploadAvatarIn}, TContext> => {

const mutationKey = ['postApiFileAvatar'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFileAvatar>>, {data: UploadAvatarIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiFileAvatar(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFileAvatarMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFileAvatar>>>
    export type PostApiFileAvatarMutationBody = UploadAvatarIn
    export type PostApiFileAvatarMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ‰∏ä‰º†Â§¥ÂÉè
 */
export const usePostApiFileAvatar = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileAvatar>>, TError,{data: UploadAvatarIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiFileAvatar>>,
        TError,
        {data: UploadAvatarIn},
        TContext
      > => {

      const mutationOptions = getPostApiFileAvatarMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÈÉ®Èó®ÂàóË°®
 */
export const getApiDepartments = (
    params?: GetApiDepartmentsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetDepartmentsOut>> => {
    
    
    return axios.default.get(
      `/api/departments`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiDepartmentsQueryKey = (params?: GetApiDepartmentsParams,) => {
    return [`/api/departments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiDepartmentsQueryOptions = <TData = Awaited<ReturnType<typeof getApiDepartments>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiDepartmentsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDepartmentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDepartments>>> = ({ signal }) => getApiDepartments(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiDepartmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDepartments>>>
export type GetApiDepartmentsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÈÉ®Èó®ÂàóË°®
 */

export function useGetApiDepartments<TData = Awaited<ReturnType<typeof getApiDepartments>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiDepartmentsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiDepartments>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiDepartmentsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÂàõÂª∫Êñ∞ÈÉ®Èó®ÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const postApiDepartments = (
    createDepartmentInUpdate: CreateDepartmentInUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateDepartmentOut>> => {
    
    
    return axios.default.post(
      `/api/departments`,
      createDepartmentInUpdate,options
    );
  }



export const getPostApiDepartmentsMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDepartments>>, TError,{data: CreateDepartmentInUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiDepartments>>, TError,{data: CreateDepartmentInUpdate}, TContext> => {

const mutationKey = ['postApiDepartments'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDepartments>>, {data: CreateDepartmentInUpdate}> = (props) => {
          const {data} = props ?? {};

          return  postApiDepartments(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiDepartmentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDepartments>>>
    export type PostApiDepartmentsMutationBody = CreateDepartmentInUpdate
    export type PostApiDepartmentsMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂàõÂª∫Êñ∞ÈÉ®Èó®ÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const usePostApiDepartments = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDepartments>>, TError,{data: CreateDepartmentInUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiDepartments>>,
        TError,
        {data: CreateDepartmentInUpdate},
        TContext
      > => {

      const mutationOptions = getPostApiDepartmentsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ‰ΩøÁî®Âà∑Êñ∞‰ª§ÁâåËé∑ÂèñÊñ∞ÁöÑËÆøÈóÆ‰ª§Áâå
 */
export const postApiAuthRefresh = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RefreshTokenOut>> => {
    
    
    return axios.default.post(
      `/api/auth/refresh`,undefined,options
    );
  }



export const getPostApiAuthRefreshMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,void, TContext> => {

const mutationKey = ['postApiAuthRefresh'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthRefresh>>, void> = () => {
          

          return  postApiAuthRefresh(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRefresh>>>
    
    export type PostApiAuthRefreshMutationError = AxiosError<HTTPError>

    /**
 * @summary ‰ΩøÁî®Âà∑Êñ∞‰ª§ÁâåËé∑ÂèñÊñ∞ÁöÑËÆøÈóÆ‰ª§Áâå
 */
export const usePostApiAuthRefresh = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthRefresh>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiAuthRefreshMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ê®°Á≥äÊêúÁ¥¢Áî®Êà∑
 */
export const getApiUsersSearch = (
    params: GetApiUsersSearchParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersOut>> => {
    
    
    return axios.default.get(
      `/api/users/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiUsersSearchQueryKey = (params: GetApiUsersSearchParams,) => {
    return [`/api/users/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersSearchQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersSearch>>, TError = AxiosError<ValidationError>>(params: GetApiUsersSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersSearch>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersSearch>>> = ({ signal }) => getApiUsersSearch(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersSearch>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsersSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersSearch>>>
export type GetApiUsersSearchQueryError = AxiosError<ValidationError>


/**
 * @summary Ê®°Á≥äÊêúÁ¥¢Áî®Êà∑
 */

export function useGetApiUsersSearch<TData = Awaited<ReturnType<typeof getApiUsersSearch>>, TError = AxiosError<ValidationError>>(
 params: GetApiUsersSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersSearch>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUsersSearchQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ÁöÑÊâÄÊúâÂØπËØù
 */
export const getApiConversations = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetConversationsOut>> => {
    
    
    return axios.default.get(
      `/api/conversations`,options
    );
  }


export const getGetApiConversationsQueryKey = () => {
    return [`/api/conversations`] as const;
    }

    
export const getGetApiConversationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiConversations>>, TError = AxiosError<HTTPError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversations>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiConversationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiConversations>>> = ({ signal }) => getApiConversations({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiConversations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiConversationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiConversations>>>
export type GetApiConversationsQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ÁöÑÊâÄÊúâÂØπËØù
 */

export function useGetApiConversations<TData = Awaited<ReturnType<typeof getApiConversations>>, TError = AxiosError<HTTPError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversations>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiConversationsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Êõ¥ÊîπÂΩìÂâçÁî®Êà∑ÁöÑÂØÜÁ†Å
 */
export const putApiUserPassword = (
    changePasswordIn: ChangePasswordIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChangePasswordOut>> => {
    
    
    return axios.default.put(
      `/api/user/password`,
      changePasswordIn,options
    );
  }



export const getPutApiUserPasswordMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserPassword>>, TError,{data: ChangePasswordIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserPassword>>, TError,{data: ChangePasswordIn}, TContext> => {

const mutationKey = ['putApiUserPassword'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserPassword>>, {data: ChangePasswordIn}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserPassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUserPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserPassword>>>
    export type PutApiUserPasswordMutationBody = ChangePasswordIn
    export type PutApiUserPasswordMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥ÊîπÂΩìÂâçÁî®Êà∑ÁöÑÂØÜÁ†Å
 */
export const usePutApiUserPassword = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserPassword>>, TError,{data: ChangePasswordIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiUserPassword>>,
        TError,
        {data: ChangePasswordIn},
        TContext
      > => {

      const mutationOptions = getPutApiUserPasswordMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Êé•Êî∂ÈÇÆ‰ª∂ÔºàÂÜÖÈÉ®‰ΩøÁî®Ôºâ
 */
export const postApiEmailReceive = (
    receiveEmailIn: ReceiveEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ReceiveEmailOut>> => {
    
    
    return axios.default.post(
      `/api/email/receive`,
      receiveEmailIn,options
    );
  }



export const getPostApiEmailReceiveMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailReceive>>, TError,{data: ReceiveEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmailReceive>>, TError,{data: ReceiveEmailIn}, TContext> => {

const mutationKey = ['postApiEmailReceive'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmailReceive>>, {data: ReceiveEmailIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiEmailReceive(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailReceiveMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmailReceive>>>
    export type PostApiEmailReceiveMutationBody = ReceiveEmailIn
    export type PostApiEmailReceiveMutationError = AxiosError<ValidationError>

    /**
 * @summary Êé•Êî∂ÈÇÆ‰ª∂ÔºàÂÜÖÈÉ®‰ΩøÁî®Ôºâ
 */
export const usePostApiEmailReceive = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailReceive>>, TError,{data: ReceiveEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmailReceive>>,
        TError,
        {data: ReceiveEmailIn},
        TContext
      > => {

      const mutationOptions = getPostApiEmailReceiveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÁî®Êà∑ÁöÑÈÇÆÁÆ±Ë¥¶Âè∑Áõ∏ÂÖ≥‰ø°ÊÅØ
 */
export const getApiEmailAccount = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetEmailAccountOut>> => {
    
    
    return axios.default.get(
      `/api/email/account`,options
    );
  }


export const getGetApiEmailAccountQueryKey = () => {
    return [`/api/email/account`] as const;
    }

    
export const getGetApiEmailAccountQueryOptions = <TData = Awaited<ReturnType<typeof getApiEmailAccount>>, TError = AxiosError<HTTPError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmailAccount>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEmailAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEmailAccount>>> = ({ signal }) => getApiEmailAccount({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEmailAccount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiEmailAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmailAccount>>>
export type GetApiEmailAccountQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÁî®Êà∑ÁöÑÈÇÆÁÆ±Ë¥¶Âè∑Áõ∏ÂÖ≥‰ø°ÊÅØ
 */

export function useGetApiEmailAccount<TData = Awaited<ReturnType<typeof getApiEmailAccount>>, TError = AxiosError<HTTPError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmailAccount>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiEmailAccountQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ‰øÆÊîπÁî®Êà∑ÁöÑÈÇÆÁÆ±Ë¥¶Âè∑Áõ∏ÂÖ≥‰ø°ÊÅØ
 */
export const putApiEmailAccount = (
    updateEmailInUpdate: UpdateEmailInUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateEmailOut>> => {
    
    
    return axios.default.put(
      `/api/email/account`,
      updateEmailInUpdate,options
    );
  }



export const getPutApiEmailAccountMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailAccount>>, TError,{data: UpdateEmailInUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEmailAccount>>, TError,{data: UpdateEmailInUpdate}, TContext> => {

const mutationKey = ['putApiEmailAccount'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEmailAccount>>, {data: UpdateEmailInUpdate}> = (props) => {
          const {data} = props ?? {};

          return  putApiEmailAccount(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEmailAccountMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmailAccount>>>
    export type PutApiEmailAccountMutationBody = UpdateEmailInUpdate
    export type PutApiEmailAccountMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ‰øÆÊîπÁî®Êà∑ÁöÑÈÇÆÁÆ±Ë¥¶Âè∑Áõ∏ÂÖ≥‰ø°ÊÅØ
 */
export const usePutApiEmailAccount = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailAccount>>, TError,{data: UpdateEmailInUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiEmailAccount>>,
        TError,
        {data: UpdateEmailInUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiEmailAccountMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÊêúÁ¥¢Áî®Êà∑ÁöÑÈÇÆ‰ª∂
 */
export const getApiEmailsSearch = (
    params: GetApiEmailsSearchParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SearchEmailsOut>> => {
    
    
    return axios.default.get(
      `/api/emails/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiEmailsSearchQueryKey = (params: GetApiEmailsSearchParams,) => {
    return [`/api/emails/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiEmailsSearchQueryOptions = <TData = Awaited<ReturnType<typeof getApiEmailsSearch>>, TError = AxiosError<HTTPError | ValidationError>>(params: GetApiEmailsSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmailsSearch>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEmailsSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEmailsSearch>>> = ({ signal }) => getApiEmailsSearch(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEmailsSearch>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiEmailsSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmailsSearch>>>
export type GetApiEmailsSearchQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary ÊêúÁ¥¢Áî®Êà∑ÁöÑÈÇÆ‰ª∂
 */

export function useGetApiEmailsSearch<TData = Awaited<ReturnType<typeof getApiEmailsSearch>>, TError = AxiosError<HTTPError | ValidationError>>(
 params: GetApiEmailsSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmailsSearch>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiEmailsSearchQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ‰∏ä‰º†‰∏Ä‰∏™Êñá‰ª∂Âà∞Áü•ËØÜÂ∫ìÔºàÊúçÂä°Âô®Ôºâ
 */
export const postApiFileKnowledge = (
    uploadKnowledgeIn: UploadKnowledgeIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadKnowledgeOut>> => {
    
    const formData = new FormData();
if(uploadKnowledgeIn.file !== undefined) {
 formData.append(`file`, uploadKnowledgeIn.file)
 }
if(uploadKnowledgeIn.isPublic !== undefined) {
 formData.append(`isPublic`, uploadKnowledgeIn.isPublic.toString())
 }
if(uploadKnowledgeIn.isKnowledgeFile !== undefined) {
 formData.append(`isKnowledgeFile`, uploadKnowledgeIn.isKnowledgeFile.toString())
 }
if(uploadKnowledgeIn.isDepartment !== undefined) {
 formData.append(`isDepartment`, uploadKnowledgeIn.isDepartment.toString())
 }

    return axios.default.post(
      `/api/file/knowledge`,
      formData,options
    );
  }



export const getPostApiFileKnowledgeMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileKnowledge>>, TError,{data: UploadKnowledgeIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiFileKnowledge>>, TError,{data: UploadKnowledgeIn}, TContext> => {

const mutationKey = ['postApiFileKnowledge'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFileKnowledge>>, {data: UploadKnowledgeIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiFileKnowledge(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFileKnowledgeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFileKnowledge>>>
    export type PostApiFileKnowledgeMutationBody = UploadKnowledgeIn
    export type PostApiFileKnowledgeMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ‰∏ä‰º†‰∏Ä‰∏™Êñá‰ª∂Âà∞Áü•ËØÜÂ∫ìÔºàÊúçÂä°Âô®Ôºâ
 */
export const usePostApiFileKnowledge = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileKnowledge>>, TError,{data: UploadKnowledgeIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiFileKnowledge>>,
        TError,
        {data: UploadKnowledgeIn},
        TContext
      > => {

      const mutationOptions = getPostApiFileKnowledgeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØÊàñ‰∏ãËΩΩÊñá‰ª∂
 */
export const getApiFileFileId = (
    fileId: number,
    params?: GetApiFileFileIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/file/${fileId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiFileFileIdQueryKey = (fileId: number,
    params?: GetApiFileFileIdParams,) => {
    return [`/api/file/${fileId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiFileFileIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiFileFileId>>, TError = AxiosError<HTTPError | ValidationError>>(fileId: number,
    params?: GetApiFileFileIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFileFileId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFileFileIdQueryKey(fileId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFileFileId>>> = ({ signal }) => getApiFileFileId(fileId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(fileId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFileFileId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiFileFileIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFileFileId>>>
export type GetApiFileFileIdQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØÊàñ‰∏ãËΩΩÊñá‰ª∂
 */

export function useGetApiFileFileId<TData = Awaited<ReturnType<typeof getApiFileFileId>>, TError = AxiosError<HTTPError | ValidationError>>(
 fileId: number,
    params?: GetApiFileFileIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFileFileId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiFileFileIdQueryOptions(fileId,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Âà†Èô§Êñá‰ª∂
 */
export const deleteApiFileFileId = (
    fileId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Generated>> => {
    
    
    return axios.default.delete(
      `/api/file/${fileId}`,options
    );
  }



export const getDeleteApiFileFileIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFileFileId>>, TError,{fileId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiFileFileId>>, TError,{fileId: string}, TContext> => {

const mutationKey = ['deleteApiFileFileId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiFileFileId>>, {fileId: string}> = (props) => {
          const {fileId} = props ?? {};

          return  deleteApiFileFileId(fileId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiFileFileIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiFileFileId>>>
    
    export type DeleteApiFileFileIdMutationError = AxiosError<HTTPError>

    /**
 * @summary Âà†Èô§Êñá‰ª∂
 */
export const useDeleteApiFileFileId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFileFileId>>, TError,{fileId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiFileFileId>>,
        TError,
        {fileId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiFileFileIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÁî®Êà∑ËØ¶ÁªÜ‰ø°ÊÅØ
 */
export const getApiUserUserId = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.default.get(
      `/api/user/${userId}`,options
    );
  }


export const getGetApiUserUserIdQueryKey = (userId: string,) => {
    return [`/api/user/${userId}`] as const;
    }

    
export const getGetApiUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<HTTPError>>(userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserUserId>>> = ({ signal }) => getApiUserUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserUserId>>>
export type GetApiUserUserIdQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÁî®Êà∑ËØ¶ÁªÜ‰ø°ÊÅØ
 */

export function useGetApiUserUserId<TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<HTTPError>>(
 userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÂàõÂª∫Êñ∞ÁöÑAIÂØπËØù
 */
export const postApiConversationAi = (
    createAIConversationInUpdate: CreateAIConversationInUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AIConversationOut>> => {
    
    
    return axios.default.post(
      `/api/conversation/ai`,
      createAIConversationInUpdate,options
    );
  }



export const getPostApiConversationAiMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiConversationAi>>, TError,{data: CreateAIConversationInUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiConversationAi>>, TError,{data: CreateAIConversationInUpdate}, TContext> => {

const mutationKey = ['postApiConversationAi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiConversationAi>>, {data: CreateAIConversationInUpdate}> = (props) => {
          const {data} = props ?? {};

          return  postApiConversationAi(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiConversationAiMutationResult = NonNullable<Awaited<ReturnType<typeof postApiConversationAi>>>
    export type PostApiConversationAiMutationBody = CreateAIConversationInUpdate
    export type PostApiConversationAiMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂàõÂª∫Êñ∞ÁöÑAIÂØπËØù
 */
export const usePostApiConversationAi = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiConversationAi>>, TError,{data: CreateAIConversationInUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiConversationAi>>,
        TError,
        {data: CreateAIConversationInUpdate},
        TContext
      > => {

      const mutationOptions = getPostApiConversationAiMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂ•ΩÂèãËØ∑Ê±Ç
 */
export const getApiFriendRequests = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFriendRequestsOut>> => {
    
    
    return axios.default.get(
      `/api/friend-requests`,options
    );
  }


export const getGetApiFriendRequestsQueryKey = () => {
    return [`/api/friend-requests`] as const;
    }

    
export const getGetApiFriendRequestsQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriendRequests>>, TError = AxiosError<HTTPError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriendRequests>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendRequestsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriendRequests>>> = ({ signal }) => getApiFriendRequests({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriendRequests>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiFriendRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriendRequests>>>
export type GetApiFriendRequestsQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂ•ΩÂèãËØ∑Ê±Ç
 */

export function useGetApiFriendRequests<TData = Awaited<ReturnType<typeof getApiFriendRequests>>, TError = AxiosError<HTTPError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriendRequests>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiFriendRequestsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ÁöÑÊâÄÊúâAIÂØπËØù
 */
export const getApiConversationsAi = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AIConversationsOut>> => {
    
    
    return axios.default.get(
      `/api/conversations/ai`,options
    );
  }


export const getGetApiConversationsAiQueryKey = () => {
    return [`/api/conversations/ai`] as const;
    }

    
export const getGetApiConversationsAiQueryOptions = <TData = Awaited<ReturnType<typeof getApiConversationsAi>>, TError = AxiosError<HTTPError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversationsAi>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiConversationsAiQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiConversationsAi>>> = ({ signal }) => getApiConversationsAi({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiConversationsAi>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiConversationsAiQueryResult = NonNullable<Awaited<ReturnType<typeof getApiConversationsAi>>>
export type GetApiConversationsAiQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ÁöÑÊâÄÊúâAIÂØπËØù
 */

export function useGetApiConversationsAi<TData = Awaited<ReturnType<typeof getApiConversationsAi>>, TError = AxiosError<HTTPError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversationsAi>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiConversationsAiQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Áî®Êà∑ÈÄöËøáÈÇÆÁÆ±ÁôªÂΩïËé∑ÂèñËÆøÈóÆ‰ª§Áâå
 */
export const postApiAuthLoginEmail = (
    loginByEmailIn: LoginByEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoginOut>> => {
    
    
    return axios.default.post(
      `/api/auth/login/email`,
      loginByEmailIn,options
    );
  }



export const getPostApiAuthLoginEmailMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginEmail>>, TError,{data: LoginByEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginEmail>>, TError,{data: LoginByEmailIn}, TContext> => {

const mutationKey = ['postApiAuthLoginEmail'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLoginEmail>>, {data: LoginByEmailIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLoginEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLoginEmail>>>
    export type PostApiAuthLoginEmailMutationBody = LoginByEmailIn
    export type PostApiAuthLoginEmailMutationError = AxiosError<ValidationError>

    /**
 * @summary Áî®Êà∑ÈÄöËøáÈÇÆÁÆ±ÁôªÂΩïËé∑ÂèñËÆøÈóÆ‰ª§Áâå
 */
export const usePostApiAuthLoginEmail = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginEmail>>, TError,{data: LoginByEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLoginEmail>>,
        TError,
        {data: LoginByEmailIn},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginEmailMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÁæ§ÁªÑ‰ø°ÊÅØ
 */
export const getApiGroupGroupId = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGroupOut>> => {
    
    
    return axios.default.get(
      `/api/group/${groupId}`,options
    );
  }


export const getGetApiGroupGroupIdQueryKey = (groupId: string,) => {
    return [`/api/group/${groupId}`] as const;
    }

    
export const getGetApiGroupGroupIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupGroupId>>, TError = AxiosError<HTTPError>>(groupId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupGroupIdQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupGroupId>>> = ({ signal }) => getApiGroupGroupId(groupId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupGroupId>>>
export type GetApiGroupGroupIdQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÁæ§ÁªÑ‰ø°ÊÅØ
 */

export function useGetApiGroupGroupId<TData = Awaited<ReturnType<typeof getApiGroupGroupId>>, TError = AxiosError<HTTPError>>(
 groupId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupGroupIdQueryOptions(groupId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ‰øÆÊîπÁæ§ÁªÑ‰ø°ÊÅØ
 */
export const putApiGroupGroupId = (
    groupId: string,
    groupUpdate: GroupUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateGroupOut>> => {
    
    
    return axios.default.put(
      `/api/group/${groupId}`,
      groupUpdate,options
    );
  }



export const getPutApiGroupGroupIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiGroupGroupId>>, TError,{groupId: string;data: GroupUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiGroupGroupId>>, TError,{groupId: string;data: GroupUpdate}, TContext> => {

const mutationKey = ['putApiGroupGroupId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiGroupGroupId>>, {groupId: string;data: GroupUpdate}> = (props) => {
          const {groupId,data} = props ?? {};

          return  putApiGroupGroupId(groupId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiGroupGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiGroupGroupId>>>
    export type PutApiGroupGroupIdMutationBody = GroupUpdate
    export type PutApiGroupGroupIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ‰øÆÊîπÁæ§ÁªÑ‰ø°ÊÅØ
 */
export const usePutApiGroupGroupId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiGroupGroupId>>, TError,{groupId: string;data: GroupUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiGroupGroupId>>,
        TError,
        {groupId: string;data: GroupUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiGroupGroupIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âà†Èô§Áæ§ÁªÑ
 */
export const deleteApiGroupGroupId = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteGroupOut>> => {
    
    
    return axios.default.delete(
      `/api/group/${groupId}`,options
    );
  }



export const getDeleteApiGroupGroupIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupId>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupId>>, TError,{groupId: string}, TContext> => {

const mutationKey = ['deleteApiGroupGroupId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiGroupGroupId>>, {groupId: string}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteApiGroupGroupId(groupId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiGroupGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiGroupGroupId>>>
    
    export type DeleteApiGroupGroupIdMutationError = AxiosError<HTTPError>

    /**
 * @summary Âà†Èô§Áæ§ÁªÑ
 */
export const useDeleteApiGroupGroupId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupId>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiGroupGroupId>>,
        TError,
        {groupId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiGroupGroupIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑Âèñ‰∏Ä‰∏™Â•ΩÂèãÁöÑÁõ∏ÂÖ≥‰ø°ÊÅØ
 */
export const getApiFriendFriendId = (
    friendId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFriendOut>> => {
    
    
    return axios.default.get(
      `/api/friend/${friendId}`,options
    );
  }


export const getGetApiFriendFriendIdQueryKey = (friendId: number,) => {
    return [`/api/friend/${friendId}`] as const;
    }

    
export const getGetApiFriendFriendIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriendFriendId>>, TError = AxiosError<HTTPError | ValidationError>>(friendId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriendFriendId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendFriendIdQueryKey(friendId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriendFriendId>>> = ({ signal }) => getApiFriendFriendId(friendId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(friendId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriendFriendId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiFriendFriendIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriendFriendId>>>
export type GetApiFriendFriendIdQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑Âèñ‰∏Ä‰∏™Â•ΩÂèãÁöÑÁõ∏ÂÖ≥‰ø°ÊÅØ
 */

export function useGetApiFriendFriendId<TData = Awaited<ReturnType<typeof getApiFriendFriendId>>, TError = AxiosError<HTTPError | ValidationError>>(
 friendId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriendFriendId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiFriendFriendIdQueryOptions(friendId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ê£ÄÊü•Áî®Êà∑ÂêçÊàñÈÇÆÁÆ±ÊòØÂê¶ÂèØÁî®
 */
export const getApiUserCheckAvailability = (
    params?: GetApiUserCheckAvailabilityParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CheckAvailabilityOut>> => {
    
    
    return axios.default.get(
      `/api/user/check-availability`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiUserCheckAvailabilityQueryKey = (params?: GetApiUserCheckAvailabilityParams,) => {
    return [`/api/user/check-availability`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUserCheckAvailabilityQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError = AxiosError<ValidationError>>(params?: GetApiUserCheckAvailabilityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserCheckAvailabilityQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserCheckAvailability>>> = ({ signal }) => getApiUserCheckAvailability(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUserCheckAvailabilityQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserCheckAvailability>>>
export type GetApiUserCheckAvailabilityQueryError = AxiosError<ValidationError>


/**
 * @summary Ê£ÄÊü•Áî®Êà∑ÂêçÊàñÈÇÆÁÆ±ÊòØÂê¶ÂèØÁî®
 */

export function useGetApiUserCheckAvailability<TData = Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError = AxiosError<ValidationError>>(
 params?: GetApiUserCheckAvailabilityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUserCheckAvailabilityQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ëé∑ÂèñÁæ§ÁªÑÁöÑÊâÄÊúâÊàêÂëò
 */
export const getApiGroupGroupIdMembers = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGroupMembersOut>> => {
    
    
    return axios.default.get(
      `/api/group/${groupId}/members`,options
    );
  }


export const getGetApiGroupGroupIdMembersQueryKey = (groupId: string,) => {
    return [`/api/group/${groupId}/members`] as const;
    }

    
export const getGetApiGroupGroupIdMembersQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError = AxiosError<HTTPError>>(groupId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupGroupIdMembersQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>> = ({ signal }) => getApiGroupGroupIdMembers(groupId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupGroupIdMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>>
export type GetApiGroupGroupIdMembersQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÁæ§ÁªÑÁöÑÊâÄÊúâÊàêÂëò
 */

export function useGetApiGroupGroupIdMembers<TData = Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError = AxiosError<HTTPError>>(
 groupId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupGroupIdMembersQueryOptions(groupId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ÂèØÂÆ°ÊâπÁöÑÂä†Áæ§ËØ∑Ê±ÇÔºà‰Ωú‰∏∫Áæ§‰∏ªÊàñÁÆ°ÁêÜÂëòÔºâ
 */
export const getApiManageableJoinRequests = (
    params?: GetApiManageableJoinRequestsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGroupJoinRequestsOut>> => {
    
    
    return axios.default.get(
      `/api/manageable-join-requests`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiManageableJoinRequestsQueryKey = (params?: GetApiManageableJoinRequestsParams,) => {
    return [`/api/manageable-join-requests`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiManageableJoinRequestsQueryOptions = <TData = Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiManageableJoinRequestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiManageableJoinRequestsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiManageableJoinRequests>>> = ({ signal }) => getApiManageableJoinRequests(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiManageableJoinRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiManageableJoinRequests>>>
export type GetApiManageableJoinRequestsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ÂèØÂÆ°ÊâπÁöÑÂä†Áæ§ËØ∑Ê±ÇÔºà‰Ωú‰∏∫Áæ§‰∏ªÊàñÁÆ°ÁêÜÂëòÔºâ
 */

export function useGetApiManageableJoinRequests<TData = Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiManageableJoinRequestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiManageableJoinRequestsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÂÆ°ÊâπÂä†Áæ§ËØ∑Ê±Ç
 */
export const putApiJoinRequestRequestId = (
    requestId: number,
    params?: PutApiJoinRequestRequestIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandleGroupJoinRequestOut>> => {
    
    
    return axios.default.put(
      `/api/join-request/${requestId}`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPutApiJoinRequestRequestIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>, TError,{requestId: number;params?: PutApiJoinRequestRequestIdParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>, TError,{requestId: number;params?: PutApiJoinRequestRequestIdParams}, TContext> => {

const mutationKey = ['putApiJoinRequestRequestId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>, {requestId: number;params?: PutApiJoinRequestRequestIdParams}> = (props) => {
          const {requestId,params} = props ?? {};

          return  putApiJoinRequestRequestId(requestId,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiJoinRequestRequestIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>>
    
    export type PutApiJoinRequestRequestIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂÆ°ÊâπÂä†Áæ§ËØ∑Ê±Ç
 */
export const usePutApiJoinRequestRequestId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>, TError,{requestId: number;params?: PutApiJoinRequestRequestIdParams}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiJoinRequestRequestId>>,
        TError,
        {requestId: number;params?: PutApiJoinRequestRequestIdParams},
        TContext
      > => {

      const mutationOptions = getPutApiJoinRequestRequestIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ê∑ªÂä†ÈÇÆ‰ª∂Ê†áÁ≠æ
 */
export const postApiEmailEmailIdTags = (
    emailId: number,
    addTagsIn: AddTagsIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageOnly>> => {
    
    
    return axios.default.post(
      `/api/email/${emailId}/tags`,
      addTagsIn,options
    );
  }



export const getPostApiEmailEmailIdTagsMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>, TError,{emailId: number;data: AddTagsIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>, TError,{emailId: number;data: AddTagsIn}, TContext> => {

const mutationKey = ['postApiEmailEmailIdTags'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>, {emailId: number;data: AddTagsIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  postApiEmailEmailIdTags(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailEmailIdTagsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>>
    export type PostApiEmailEmailIdTagsMutationBody = AddTagsIn
    export type PostApiEmailEmailIdTagsMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Ê∑ªÂä†ÈÇÆ‰ª∂Ê†áÁ≠æ
 */
export const usePostApiEmailEmailIdTags = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>, TError,{emailId: number;data: AddTagsIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmailEmailIdTags>>,
        TError,
        {emailId: number;data: AddTagsIn},
        TContext
      > => {

      const mutationOptions = getPostApiEmailEmailIdTagsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ê†áËÆ∞/ÂèñÊ∂àÊ†áËÆ∞ÂûÉÂúæÈÇÆ‰ª∂
 */
export const putApiEmailEmailIdSpam = (
    emailId: number,
    markSpamIn: MarkSpamIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageOnly>> => {
    
    
    return axios.default.put(
      `/api/email/${emailId}/spam`,
      markSpamIn,options
    );
  }



export const getPutApiEmailEmailIdSpamMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>, TError,{emailId: number;data: MarkSpamIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>, TError,{emailId: number;data: MarkSpamIn}, TContext> => {

const mutationKey = ['putApiEmailEmailIdSpam'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>, {emailId: number;data: MarkSpamIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  putApiEmailEmailIdSpam(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEmailEmailIdSpamMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>>
    export type PutApiEmailEmailIdSpamMutationBody = MarkSpamIn
    export type PutApiEmailEmailIdSpamMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Ê†áËÆ∞/ÂèñÊ∂àÊ†áËÆ∞ÂûÉÂúæÈÇÆ‰ª∂
 */
export const usePutApiEmailEmailIdSpam = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>, TError,{emailId: number;data: MarkSpamIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>,
        TError,
        {emailId: number;data: MarkSpamIn},
        TContext
      > => {

      const mutationOptions = getPutApiEmailEmailIdSpamMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Êõ¥Êñ∞Êñá‰ª∂ÁöÑÊùÉÈôêÔºàÂê´Áü•ËØÜÂ∫ìÂêåÊ≠•Ôºâ
 */
export const putApiFileFileIdPermissions = (
    fileId: string,
    changeFilePermissionsIn: ChangeFilePermissionsIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChangeFilePermissionsOut>> => {
    
    
    return axios.default.put(
      `/api/file/${fileId}/permissions`,
      changeFilePermissionsIn,options
    );
  }



export const getPutApiFileFileIdPermissionsMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>, TError,{fileId: string;data: ChangeFilePermissionsIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>, TError,{fileId: string;data: ChangeFilePermissionsIn}, TContext> => {

const mutationKey = ['putApiFileFileIdPermissions'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>, {fileId: string;data: ChangeFilePermissionsIn}> = (props) => {
          const {fileId,data} = props ?? {};

          return  putApiFileFileIdPermissions(fileId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiFileFileIdPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>>
    export type PutApiFileFileIdPermissionsMutationBody = ChangeFilePermissionsIn
    export type PutApiFileFileIdPermissionsMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥Êñ∞Êñá‰ª∂ÁöÑÊùÉÈôêÔºàÂê´Áü•ËØÜÂ∫ìÂêåÊ≠•Ôºâ
 */
export const usePutApiFileFileIdPermissions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>, TError,{fileId: string;data: ChangeFilePermissionsIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiFileFileIdPermissions>>,
        TError,
        {fileId: string;data: ChangeFilePermissionsIn},
        TContext
      > => {

      const mutationOptions = getPutApiFileFileIdPermissionsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÁßªÂÖ•/ÁßªÂá∫ÂõûÊî∂Á´ô
 */
export const putApiEmailEmailIdTrash = (
    emailId: number,
    trashEmailIn: TrashEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageOnly>> => {
    
    
    return axios.default.put(
      `/api/email/${emailId}/trash`,
      trashEmailIn,options
    );
  }



export const getPutApiEmailEmailIdTrashMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>, TError,{emailId: number;data: TrashEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>, TError,{emailId: number;data: TrashEmailIn}, TContext> => {

const mutationKey = ['putApiEmailEmailIdTrash'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>, {emailId: number;data: TrashEmailIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  putApiEmailEmailIdTrash(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEmailEmailIdTrashMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>>
    export type PutApiEmailEmailIdTrashMutationBody = TrashEmailIn
    export type PutApiEmailEmailIdTrashMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÁßªÂÖ•/ÁßªÂá∫ÂõûÊî∂Á´ô
 */
export const usePutApiEmailEmailIdTrash = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>, TError,{emailId: number;data: TrashEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>,
        TError,
        {emailId: number;data: TrashEmailIn},
        TContext
      > => {

      const mutationOptions = getPutApiEmailEmailIdTrashMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÂõûÂ§çÈÇÆ‰ª∂
 */
export const postApiEmailEmailIdReply = (
    emailId: number,
    replyEmailIn: ReplyEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ReplyEmailOut>> => {
    
    
    return axios.default.post(
      `/api/email/${emailId}/reply`,
      replyEmailIn,options
    );
  }



export const getPostApiEmailEmailIdReplyMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>, TError,{emailId: number;data: ReplyEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>, TError,{emailId: number;data: ReplyEmailIn}, TContext> => {

const mutationKey = ['postApiEmailEmailIdReply'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>, {emailId: number;data: ReplyEmailIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  postApiEmailEmailIdReply(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailEmailIdReplyMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>>
    export type PostApiEmailEmailIdReplyMutationBody = ReplyEmailIn
    export type PostApiEmailEmailIdReplyMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂõûÂ§çÈÇÆ‰ª∂
 */
export const usePostApiEmailEmailIdReply = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>, TError,{emailId: number;data: ReplyEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmailEmailIdReply>>,
        TError,
        {emailId: number;data: ReplyEmailIn},
        TContext
      > => {

      const mutationOptions = getPostApiEmailEmailIdReplyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÂΩíÊ°£/ÂèñÊ∂àÂΩíÊ°£ÈÇÆ‰ª∂
 */
export const putApiEmailEmailIdArchive = (
    emailId: number,
    archiveEmailIn: ArchiveEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageOnly>> => {
    
    
    return axios.default.put(
      `/api/email/${emailId}/archive`,
      archiveEmailIn,options
    );
  }



export const getPutApiEmailEmailIdArchiveMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>, TError,{emailId: number;data: ArchiveEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>, TError,{emailId: number;data: ArchiveEmailIn}, TContext> => {

const mutationKey = ['putApiEmailEmailIdArchive'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>, {emailId: number;data: ArchiveEmailIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  putApiEmailEmailIdArchive(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEmailEmailIdArchiveMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>>
    export type PutApiEmailEmailIdArchiveMutationBody = ArchiveEmailIn
    export type PutApiEmailEmailIdArchiveMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂΩíÊ°£/ÂèñÊ∂àÂΩíÊ°£ÈÇÆ‰ª∂
 */
export const usePutApiEmailEmailIdArchive = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>, TError,{emailId: number;data: ArchiveEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>,
        TError,
        {emailId: number;data: ArchiveEmailIn},
        TContext
      > => {

      const mutationOptions = getPutApiEmailEmailIdArchiveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÂèëÂ∏ÉÂÖ¨Âëä
 */
export const postApiGroupGroupIdAnnouncement = (
    groupId: string,
    createAnnouncementIn: CreateAnnouncementIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateAnnouncementOut>> => {
    
    
    return axios.default.post(
      `/api/group/${groupId}/announcement`,
      createAnnouncementIn,options
    );
  }



export const getPostApiGroupGroupIdAnnouncementMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>, TError,{groupId: string;data: CreateAnnouncementIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>, TError,{groupId: string;data: CreateAnnouncementIn}, TContext> => {

const mutationKey = ['postApiGroupGroupIdAnnouncement'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>, {groupId: string;data: CreateAnnouncementIn}> = (props) => {
          const {groupId,data} = props ?? {};

          return  postApiGroupGroupIdAnnouncement(groupId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupGroupIdAnnouncementMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>>
    export type PostApiGroupGroupIdAnnouncementMutationBody = CreateAnnouncementIn
    export type PostApiGroupGroupIdAnnouncementMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂèëÂ∏ÉÂÖ¨Âëä
 */
export const usePostApiGroupGroupIdAnnouncement = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>, TError,{groupId: string;data: CreateAnnouncementIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>,
        TError,
        {groupId: string;data: CreateAnnouncementIn},
        TContext
      > => {

      const mutationOptions = getPostApiGroupGroupIdAnnouncementMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âà†Èô§‰∏Ä‰∏™ÂÖ¨Âëä
 */
export const deleteApiGroupGroupIdAnnouncement = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteAnnouncementOut>> => {
    
    
    return axios.default.delete(
      `/api/group/${groupId}/announcement`,options
    );
  }



export const getDeleteApiGroupGroupIdAnnouncementMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>, TError,{groupId: string}, TContext> => {

const mutationKey = ['deleteApiGroupGroupIdAnnouncement'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>, {groupId: string}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteApiGroupGroupIdAnnouncement(groupId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiGroupGroupIdAnnouncementMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>>
    
    export type DeleteApiGroupGroupIdAnnouncementMutationError = AxiosError<HTTPError>

    /**
 * @summary Âà†Èô§‰∏Ä‰∏™ÂÖ¨Âëä
 */
export const useDeleteApiGroupGroupIdAnnouncement = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>,
        TError,
        {groupId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiGroupGroupIdAnnouncementMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Êèê‰∫§Âä†Áæ§ËØ∑Ê±Ç
 */
export const postApiGroupGroupIdJoinRequest = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SubmitGroupJoinRequestOut>> => {
    
    
    return axios.default.post(
      `/api/group/${groupId}/join-request`,undefined,options
    );
  }



export const getPostApiGroupGroupIdJoinRequestMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>, TError,{groupId: string}, TContext> => {

const mutationKey = ['postApiGroupGroupIdJoinRequest'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>, {groupId: string}> = (props) => {
          const {groupId} = props ?? {};

          return  postApiGroupGroupIdJoinRequest(groupId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupGroupIdJoinRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>>
    
    export type PostApiGroupGroupIdJoinRequestMutationError = AxiosError<HTTPError>

    /**
 * @summary Êèê‰∫§Âä†Áæ§ËØ∑Ê±Ç
 */
export const usePostApiGroupGroupIdJoinRequest = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>,
        TError,
        {groupId: string},
        TContext
      > => {

      const mutationOptions = getPostApiGroupGroupIdJoinRequestMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÂèëÈÄÅÂ•ΩÂèãËØ∑Ê±Ç
 */
export const postApiFriendRequestTargetId = (
    targetId: number,
    submitFriendRequestIn: SubmitFriendRequestIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SubmitFriendRequestOut>> => {
    
    
    return axios.default.post(
      `/api/friend-request/${targetId}`,
      submitFriendRequestIn,options
    );
  }



export const getPostApiFriendRequestTargetIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>, TError,{targetId: number;data: SubmitFriendRequestIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>, TError,{targetId: number;data: SubmitFriendRequestIn}, TContext> => {

const mutationKey = ['postApiFriendRequestTargetId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>, {targetId: number;data: SubmitFriendRequestIn}> = (props) => {
          const {targetId,data} = props ?? {};

          return  postApiFriendRequestTargetId(targetId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFriendRequestTargetIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>>
    export type PostApiFriendRequestTargetIdMutationBody = SubmitFriendRequestIn
    export type PostApiFriendRequestTargetIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂèëÈÄÅÂ•ΩÂèãËØ∑Ê±Ç
 */
export const usePostApiFriendRequestTargetId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>, TError,{targetId: number;data: SubmitFriendRequestIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiFriendRequestTargetId>>,
        TError,
        {targetId: number;data: SubmitFriendRequestIn},
        TContext
      > => {

      const mutationOptions = getPostApiFriendRequestTargetIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÊâÄÊúâ‰∏Ä‰∏™Áæ§ÁªÑÁöÑÂÖ¨Âëä
 */
export const getApiGroupGroupIdAnnouncements = (
    groupId: number,
    params?: GetApiGroupGroupIdAnnouncementsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAnnouncementsOut>> => {
    
    
    return axios.default.get(
      `/api/group/${groupId}/announcements`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiGroupGroupIdAnnouncementsQueryKey = (groupId: number,
    params?: GetApiGroupGroupIdAnnouncementsParams,) => {
    return [`/api/group/${groupId}/announcements`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiGroupGroupIdAnnouncementsQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError = AxiosError<HTTPError | ValidationError>>(groupId: number,
    params?: GetApiGroupGroupIdAnnouncementsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupGroupIdAnnouncementsQueryKey(groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>> = ({ signal }) => getApiGroupGroupIdAnnouncements(groupId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupGroupIdAnnouncementsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>>
export type GetApiGroupGroupIdAnnouncementsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâ‰∏Ä‰∏™Áæ§ÁªÑÁöÑÂÖ¨Âëä
 */

export function useGetApiGroupGroupIdAnnouncements<TData = Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError = AxiosError<HTTPError | ValidationError>>(
 groupId: number,
    params?: GetApiGroupGroupIdAnnouncementsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupGroupIdAnnouncementsQueryOptions(groupId,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂä†Áæ§ËØ∑Ê±Ç
 */
export const getApiGroupGroupIdJoinRequests = (
    groupId: string,
    params?: GetApiGroupGroupIdJoinRequestsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGroupJoinRequestsOut>> => {
    
    
    return axios.default.get(
      `/api/group/${groupId}/join-requests`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiGroupGroupIdJoinRequestsQueryKey = (groupId: string,
    params?: GetApiGroupGroupIdJoinRequestsParams,) => {
    return [`/api/group/${groupId}/join-requests`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiGroupGroupIdJoinRequestsQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError = AxiosError<HTTPError | ValidationError>>(groupId: string,
    params?: GetApiGroupGroupIdJoinRequestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupGroupIdJoinRequestsQueryKey(groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>> = ({ signal }) => getApiGroupGroupIdJoinRequests(groupId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupGroupIdJoinRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>>
export type GetApiGroupGroupIdJoinRequestsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂä†Áæ§ËØ∑Ê±Ç
 */

export function useGetApiGroupGroupIdJoinRequests<TData = Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError = AxiosError<HTTPError | ValidationError>>(
 groupId: string,
    params?: GetApiGroupGroupIdJoinRequestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupGroupIdJoinRequestsQueryOptions(groupId,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÂÆ°ÊâπÂ•ΩÂèãËØ∑Ê±Ç
 */
export const putApiFriendRequestRequestId = (
    requestId: number,
    handleFriendRequestIn: HandleFriendRequestIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandleFriendRequestOut>> => {
    
    
    return axios.default.put(
      `/api/friend-request/${requestId}`,
      handleFriendRequestIn,options
    );
  }



export const getPutApiFriendRequestRequestIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>, TError,{requestId: number;data: HandleFriendRequestIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>, TError,{requestId: number;data: HandleFriendRequestIn}, TContext> => {

const mutationKey = ['putApiFriendRequestRequestId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>, {requestId: number;data: HandleFriendRequestIn}> = (props) => {
          const {requestId,data} = props ?? {};

          return  putApiFriendRequestRequestId(requestId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiFriendRequestRequestIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>>
    export type PutApiFriendRequestRequestIdMutationBody = HandleFriendRequestIn
    export type PutApiFriendRequestRequestIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂÆ°ÊâπÂ•ΩÂèãËØ∑Ê±Ç
 */
export const usePutApiFriendRequestRequestId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>, TError,{requestId: number;data: HandleFriendRequestIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiFriendRequestRequestId>>,
        TError,
        {requestId: number;data: HandleFriendRequestIn},
        TContext
      > => {

      const mutationOptions = getPutApiFriendRequestRequestIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÈÉ®Èó®ËØ¶ÊÉÖ
 */
export const getApiDepartmentsDepartmentId = (
    departmentId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Department>> => {
    
    
    return axios.default.get(
      `/api/departments/${departmentId}`,options
    );
  }


export const getGetApiDepartmentsDepartmentIdQueryKey = (departmentId: number,) => {
    return [`/api/departments/${departmentId}`] as const;
    }

    
export const getGetApiDepartmentsDepartmentIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiDepartmentsDepartmentId>>, TError = AxiosError<HTTPError>>(departmentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsDepartmentId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDepartmentsDepartmentIdQueryKey(departmentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDepartmentsDepartmentId>>> = ({ signal }) => getApiDepartmentsDepartmentId(departmentId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(departmentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsDepartmentId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiDepartmentsDepartmentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDepartmentsDepartmentId>>>
export type GetApiDepartmentsDepartmentIdQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÈÉ®Èó®ËØ¶ÊÉÖ
 */

export function useGetApiDepartmentsDepartmentId<TData = Awaited<ReturnType<typeof getApiDepartmentsDepartmentId>>, TError = AxiosError<HTTPError>>(
 departmentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsDepartmentId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiDepartmentsDepartmentIdQueryOptions(departmentId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Êõ¥Êñ∞ÈÉ®Èó®‰ø°ÊÅØÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const putApiDepartmentsDepartmentId = (
    departmentId: number,
    updateDepartmentIn: UpdateDepartmentIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateDepartmentOut>> => {
    
    
    return axios.default.put(
      `/api/departments/${departmentId}`,
      updateDepartmentIn,options
    );
  }



export const getPutApiDepartmentsDepartmentIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiDepartmentsDepartmentId>>, TError,{departmentId: number;data: UpdateDepartmentIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiDepartmentsDepartmentId>>, TError,{departmentId: number;data: UpdateDepartmentIn}, TContext> => {

const mutationKey = ['putApiDepartmentsDepartmentId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiDepartmentsDepartmentId>>, {departmentId: number;data: UpdateDepartmentIn}> = (props) => {
          const {departmentId,data} = props ?? {};

          return  putApiDepartmentsDepartmentId(departmentId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiDepartmentsDepartmentIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiDepartmentsDepartmentId>>>
    export type PutApiDepartmentsDepartmentIdMutationBody = UpdateDepartmentIn
    export type PutApiDepartmentsDepartmentIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥Êñ∞ÈÉ®Èó®‰ø°ÊÅØÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const usePutApiDepartmentsDepartmentId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiDepartmentsDepartmentId>>, TError,{departmentId: number;data: UpdateDepartmentIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiDepartmentsDepartmentId>>,
        TError,
        {departmentId: number;data: UpdateDepartmentIn},
        TContext
      > => {

      const mutationOptions = getPutApiDepartmentsDepartmentIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âà†Èô§ÈÉ®Èó®ÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const deleteApiDepartmentsDepartmentId = (
    departmentId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.delete(
      `/api/departments/${departmentId}`,options
    );
  }



export const getDeleteApiDepartmentsDepartmentIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentId>>, TError,{departmentId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentId>>, TError,{departmentId: number}, TContext> => {

const mutationKey = ['deleteApiDepartmentsDepartmentId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentId>>, {departmentId: number}> = (props) => {
          const {departmentId} = props ?? {};

          return  deleteApiDepartmentsDepartmentId(departmentId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiDepartmentsDepartmentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentId>>>
    
    export type DeleteApiDepartmentsDepartmentIdMutationError = AxiosError<HTTPError>

    /**
 * @summary Âà†Èô§ÈÉ®Èó®ÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const useDeleteApiDepartmentsDepartmentId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentId>>, TError,{departmentId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentId>>,
        TError,
        {departmentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiDepartmentsDepartmentIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÊåáÂÆöÂØπËØùÁöÑ‰ø°ÊÅØ
 */
export const getApiConversationConversationId = (
    conversationId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetConversationOut>> => {
    
    
    return axios.default.get(
      `/api/conversation/${conversationId}`,options
    );
  }


export const getGetApiConversationConversationIdQueryKey = (conversationId: number,) => {
    return [`/api/conversation/${conversationId}`] as const;
    }

    
export const getGetApiConversationConversationIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiConversationConversationId>>, TError = AxiosError<HTTPError>>(conversationId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversationConversationId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiConversationConversationIdQueryKey(conversationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiConversationConversationId>>> = ({ signal }) => getApiConversationConversationId(conversationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(conversationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiConversationConversationId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiConversationConversationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiConversationConversationId>>>
export type GetApiConversationConversationIdQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÊåáÂÆöÂØπËØùÁöÑ‰ø°ÊÅØ
 */

export function useGetApiConversationConversationId<TData = Awaited<ReturnType<typeof getApiConversationConversationId>>, TError = AxiosError<HTTPError>>(
 conversationId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversationConversationId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiConversationConversationIdQueryOptions(conversationId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÈÇÄËØ∑Â•ΩÂèãÂä†ÂÖ•Áæ§ÁªÑ
 */
export const postApiGroupGroupIdInviteTargetId = (
    groupId: string,
    targetId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<InviteGroupMemberOut>> => {
    
    
    return axios.default.post(
      `/api/group/${groupId}/invite/${targetId}`,undefined,options
    );
  }



export const getPostApiGroupGroupIdInviteTargetIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>, TError,{groupId: string;targetId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>, TError,{groupId: string;targetId: string}, TContext> => {

const mutationKey = ['postApiGroupGroupIdInviteTargetId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>, {groupId: string;targetId: string}> = (props) => {
          const {groupId,targetId} = props ?? {};

          return  postApiGroupGroupIdInviteTargetId(groupId,targetId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupGroupIdInviteTargetIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>>
    
    export type PostApiGroupGroupIdInviteTargetIdMutationError = AxiosError<HTTPError>

    /**
 * @summary ÈÇÄËØ∑Â•ΩÂèãÂä†ÂÖ•Áæ§ÁªÑ
 */
export const usePostApiGroupGroupIdInviteTargetId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>, TError,{groupId: string;targetId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>,
        TError,
        {groupId: string;targetId: string},
        TContext
      > => {

      const mutationOptions = getPostApiGroupGroupIdInviteTargetIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Êõ¥Êñ∞AIÂØπËØùÁöÑÊòæÁ§∫ÂêçÁß∞
 */
export const putApiConversationAiConversationId = (
    conversationId: number,
    updateAIConversationIn: UpdateAIConversationIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AIConversationOut>> => {
    
    
    return axios.default.put(
      `/api/conversation/ai/${conversationId}`,
      updateAIConversationIn,options
    );
  }



export const getPutApiConversationAiConversationIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiConversationAiConversationId>>, TError,{conversationId: number;data: UpdateAIConversationIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiConversationAiConversationId>>, TError,{conversationId: number;data: UpdateAIConversationIn}, TContext> => {

const mutationKey = ['putApiConversationAiConversationId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiConversationAiConversationId>>, {conversationId: number;data: UpdateAIConversationIn}> = (props) => {
          const {conversationId,data} = props ?? {};

          return  putApiConversationAiConversationId(conversationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiConversationAiConversationIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiConversationAiConversationId>>>
    export type PutApiConversationAiConversationIdMutationBody = UpdateAIConversationIn
    export type PutApiConversationAiConversationIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥Êñ∞AIÂØπËØùÁöÑÊòæÁ§∫ÂêçÁß∞
 */
export const usePutApiConversationAiConversationId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiConversationAiConversationId>>, TError,{conversationId: number;data: UpdateAIConversationIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiConversationAiConversationId>>,
        TError,
        {conversationId: number;data: UpdateAIConversationIn},
        TContext
      > => {

      const mutationOptions = getPutApiConversationAiConversationIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âà†Èô§AIÂØπËØù
 */
export const deleteApiConversationAiConversationId = (
    conversationId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteAIConversationsOut>> => {
    
    
    return axios.default.delete(
      `/api/conversation/ai/${conversationId}`,options
    );
  }



export const getDeleteApiConversationAiConversationIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiConversationAiConversationId>>, TError,{conversationId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiConversationAiConversationId>>, TError,{conversationId: number}, TContext> => {

const mutationKey = ['deleteApiConversationAiConversationId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiConversationAiConversationId>>, {conversationId: number}> = (props) => {
          const {conversationId} = props ?? {};

          return  deleteApiConversationAiConversationId(conversationId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiConversationAiConversationIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiConversationAiConversationId>>>
    
    export type DeleteApiConversationAiConversationIdMutationError = AxiosError<HTTPError>

    /**
 * @summary Âà†Èô§AIÂØπËØù
 */
export const useDeleteApiConversationAiConversationId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiConversationAiConversationId>>, TError,{conversationId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiConversationAiConversationId>>,
        TError,
        {conversationId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiConversationAiConversationIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÈÉ®Èó®ÊàêÂëòÂàóË°®ÔºàÈúÄË¶ÅÈÉ®Èó®ÊàêÂëòÊùÉÈôêÔºâ
 */
export const getApiDepartmentsDepartmentIdMembers = (
    departmentId: number,
    params?: GetApiDepartmentsDepartmentIdMembersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetDepartmentMembersOut>> => {
    
    
    return axios.default.get(
      `/api/departments/${departmentId}/members`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiDepartmentsDepartmentIdMembersQueryKey = (departmentId: number,
    params?: GetApiDepartmentsDepartmentIdMembersParams,) => {
    return [`/api/departments/${departmentId}/members`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiDepartmentsDepartmentIdMembersQueryOptions = <TData = Awaited<ReturnType<typeof getApiDepartmentsDepartmentIdMembers>>, TError = AxiosError<HTTPError | ValidationError>>(departmentId: number,
    params?: GetApiDepartmentsDepartmentIdMembersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsDepartmentIdMembers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDepartmentsDepartmentIdMembersQueryKey(departmentId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDepartmentsDepartmentIdMembers>>> = ({ signal }) => getApiDepartmentsDepartmentIdMembers(departmentId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(departmentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsDepartmentIdMembers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiDepartmentsDepartmentIdMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDepartmentsDepartmentIdMembers>>>
export type GetApiDepartmentsDepartmentIdMembersQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÈÉ®Èó®ÊàêÂëòÂàóË°®ÔºàÈúÄË¶ÅÈÉ®Èó®ÊàêÂëòÊùÉÈôêÔºâ
 */

export function useGetApiDepartmentsDepartmentIdMembers<TData = Awaited<ReturnType<typeof getApiDepartmentsDepartmentIdMembers>>, TError = AxiosError<HTTPError | ValidationError>>(
 departmentId: number,
    params?: GetApiDepartmentsDepartmentIdMembersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiDepartmentsDepartmentIdMembers>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiDepartmentsDepartmentIdMembersQueryOptions(departmentId,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ê∑ªÂä†ÈÉ®Èó®ÊàêÂëòÔºàÈúÄË¶ÅÈÉ®Èó®ÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const postApiDepartmentsDepartmentIdMembers = (
    departmentId: number,
    addDepartmentMemberIn: AddDepartmentMemberIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AddDepartmentMemberOut>> => {
    
    
    return axios.default.post(
      `/api/departments/${departmentId}/members`,
      addDepartmentMemberIn,options
    );
  }



export const getPostApiDepartmentsDepartmentIdMembersMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDepartmentsDepartmentIdMembers>>, TError,{departmentId: number;data: AddDepartmentMemberIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiDepartmentsDepartmentIdMembers>>, TError,{departmentId: number;data: AddDepartmentMemberIn}, TContext> => {

const mutationKey = ['postApiDepartmentsDepartmentIdMembers'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDepartmentsDepartmentIdMembers>>, {departmentId: number;data: AddDepartmentMemberIn}> = (props) => {
          const {departmentId,data} = props ?? {};

          return  postApiDepartmentsDepartmentIdMembers(departmentId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiDepartmentsDepartmentIdMembersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDepartmentsDepartmentIdMembers>>>
    export type PostApiDepartmentsDepartmentIdMembersMutationBody = AddDepartmentMemberIn
    export type PostApiDepartmentsDepartmentIdMembersMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Ê∑ªÂä†ÈÉ®Èó®ÊàêÂëòÔºàÈúÄË¶ÅÈÉ®Èó®ÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const usePostApiDepartmentsDepartmentIdMembers = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDepartmentsDepartmentIdMembers>>, TError,{departmentId: number;data: AddDepartmentMemberIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiDepartmentsDepartmentIdMembers>>,
        TError,
        {departmentId: number;data: AddDepartmentMemberIn},
        TContext
      > => {

      const mutationOptions = getPostApiDepartmentsDepartmentIdMembersMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÂêëÊåáÂÆöÂØπËØùÂèëÈÄÅÊ∂àÊÅØ
 */
export const postApiConversationConversationIdMessage = (
    conversationId: number,
    postMessageIn: PostMessageIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostMessageOut>> => {
    
    
    return axios.default.post(
      `/api/conversation/${conversationId}/message`,
      postMessageIn,options
    );
  }



export const getPostApiConversationConversationIdMessageMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiConversationConversationIdMessage>>, TError,{conversationId: number;data: PostMessageIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiConversationConversationIdMessage>>, TError,{conversationId: number;data: PostMessageIn}, TContext> => {

const mutationKey = ['postApiConversationConversationIdMessage'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiConversationConversationIdMessage>>, {conversationId: number;data: PostMessageIn}> = (props) => {
          const {conversationId,data} = props ?? {};

          return  postApiConversationConversationIdMessage(conversationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiConversationConversationIdMessageMutationResult = NonNullable<Awaited<ReturnType<typeof postApiConversationConversationIdMessage>>>
    export type PostApiConversationConversationIdMessageMutationBody = PostMessageIn
    export type PostApiConversationConversationIdMessageMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂêëÊåáÂÆöÂØπËØùÂèëÈÄÅÊ∂àÊÅØ
 */
export const usePostApiConversationConversationIdMessage = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiConversationConversationIdMessage>>, TError,{conversationId: number;data: PostMessageIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiConversationConversationIdMessage>>,
        TError,
        {conversationId: number;data: PostMessageIn},
        TContext
      > => {

      const mutationOptions = getPostApiConversationConversationIdMessageMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Ëé∑ÂèñÊåáÂÆöÂØπËØùÂÜÖÁöÑÊ∂àÊÅØÂàóË°®ÔºåÊåâÂàõÂª∫Êó∂Èó¥ÈôçÂ∫èÊéíÂ∫è
 */
export const getApiConversationConversationIdMessages = (
    conversationId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetMessagesOut>> => {
    
    
    return axios.default.get(
      `/api/conversation/${conversationId}/messages`,options
    );
  }


export const getGetApiConversationConversationIdMessagesQueryKey = (conversationId: number,) => {
    return [`/api/conversation/${conversationId}/messages`] as const;
    }

    
export const getGetApiConversationConversationIdMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getApiConversationConversationIdMessages>>, TError = AxiosError<HTTPError>>(conversationId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversationConversationIdMessages>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiConversationConversationIdMessagesQueryKey(conversationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiConversationConversationIdMessages>>> = ({ signal }) => getApiConversationConversationIdMessages(conversationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(conversationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiConversationConversationIdMessages>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiConversationConversationIdMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiConversationConversationIdMessages>>>
export type GetApiConversationConversationIdMessagesQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÊåáÂÆöÂØπËØùÂÜÖÁöÑÊ∂àÊÅØÂàóË°®ÔºåÊåâÂàõÂª∫Êó∂Èó¥ÈôçÂ∫èÊéíÂ∫è
 */

export function useGetApiConversationConversationIdMessages<TData = Awaited<ReturnType<typeof getApiConversationConversationIdMessages>>, TError = AxiosError<HTTPError>>(
 conversationId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversationConversationIdMessages>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiConversationConversationIdMessagesQueryOptions(conversationId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ëé∑ÂèñAIÂØπËØùËÆæÁΩÆ
 */
export const getApiConversationAiConversationIdSettings = (
    conversationId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAIConversationSettingsOut>> => {
    
    
    return axios.default.get(
      `/api/conversation/ai/${conversationId}/settings`,options
    );
  }


export const getGetApiConversationAiConversationIdSettingsQueryKey = (conversationId: number,) => {
    return [`/api/conversation/ai/${conversationId}/settings`] as const;
    }

    
export const getGetApiConversationAiConversationIdSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getApiConversationAiConversationIdSettings>>, TError = AxiosError<HTTPError>>(conversationId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversationAiConversationIdSettings>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiConversationAiConversationIdSettingsQueryKey(conversationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiConversationAiConversationIdSettings>>> = ({ signal }) => getApiConversationAiConversationIdSettings(conversationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(conversationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiConversationAiConversationIdSettings>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiConversationAiConversationIdSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiConversationAiConversationIdSettings>>>
export type GetApiConversationAiConversationIdSettingsQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñAIÂØπËØùËÆæÁΩÆ
 */

export function useGetApiConversationAiConversationIdSettings<TData = Awaited<ReturnType<typeof getApiConversationAiConversationIdSettings>>, TError = AxiosError<HTTPError>>(
 conversationId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiConversationAiConversationIdSettings>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiConversationAiConversationIdSettingsQueryOptions(conversationId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Êõ¥Êñ∞AIÂØπËØùËÆæÁΩÆ
 */
export const putApiConversationAiConversationIdSettings = (
    conversationId: number,
    updateAIConversationSettingsIn: UpdateAIConversationSettingsIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateAIConversationSettingsOut>> => {
    
    
    return axios.default.put(
      `/api/conversation/ai/${conversationId}/settings`,
      updateAIConversationSettingsIn,options
    );
  }



export const getPutApiConversationAiConversationIdSettingsMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiConversationAiConversationIdSettings>>, TError,{conversationId: number;data: UpdateAIConversationSettingsIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiConversationAiConversationIdSettings>>, TError,{conversationId: number;data: UpdateAIConversationSettingsIn}, TContext> => {

const mutationKey = ['putApiConversationAiConversationIdSettings'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiConversationAiConversationIdSettings>>, {conversationId: number;data: UpdateAIConversationSettingsIn}> = (props) => {
          const {conversationId,data} = props ?? {};

          return  putApiConversationAiConversationIdSettings(conversationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiConversationAiConversationIdSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiConversationAiConversationIdSettings>>>
    export type PutApiConversationAiConversationIdSettingsMutationBody = UpdateAIConversationSettingsIn
    export type PutApiConversationAiConversationIdSettingsMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥Êñ∞AIÂØπËØùËÆæÁΩÆ
 */
export const usePutApiConversationAiConversationIdSettings = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiConversationAiConversationIdSettings>>, TError,{conversationId: number;data: UpdateAIConversationSettingsIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiConversationAiConversationIdSettings>>,
        TError,
        {conversationId: number;data: UpdateAIConversationSettingsIn},
        TContext
      > => {

      const mutationOptions = getPutApiConversationAiConversationIdSettingsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary ÁßªÈô§ÈÉ®Èó®ÊàêÂëòÔºàÈúÄË¶ÅÈÉ®Èó®ÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const deleteApiDepartmentsDepartmentIdMembersUserId = (
    departmentId: number,
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.delete(
      `/api/departments/${departmentId}/members/${userId}`,options
    );
  }



export const getDeleteApiDepartmentsDepartmentIdMembersUserIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentIdMembersUserId>>, TError,{departmentId: number;userId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentIdMembersUserId>>, TError,{departmentId: number;userId: number}, TContext> => {

const mutationKey = ['deleteApiDepartmentsDepartmentIdMembersUserId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentIdMembersUserId>>, {departmentId: number;userId: number}> = (props) => {
          const {departmentId,userId} = props ?? {};

          return  deleteApiDepartmentsDepartmentIdMembersUserId(departmentId,userId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiDepartmentsDepartmentIdMembersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentIdMembersUserId>>>
    
    export type DeleteApiDepartmentsDepartmentIdMembersUserIdMutationError = AxiosError<HTTPError>

    /**
 * @summary ÁßªÈô§ÈÉ®Èó®ÊàêÂëòÔºàÈúÄË¶ÅÈÉ®Èó®ÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const useDeleteApiDepartmentsDepartmentIdMembersUserId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentIdMembersUserId>>, TError,{departmentId: number;userId: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiDepartmentsDepartmentIdMembersUserId>>,
        TError,
        {departmentId: number;userId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiDepartmentsDepartmentIdMembersUserIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Êõ¥Êñ∞ÈÉ®Èó®ÊàêÂëòËßíËâ≤ÔºàÈúÄË¶ÅÈÉ®Èó®ÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const putApiDepartmentsDepartmentIdMembersUserIdRole = (
    departmentId: number,
    userId: number,
    updateDepartmentMemberRoleIn: UpdateDepartmentMemberRoleIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.put(
      `/api/departments/${departmentId}/members/${userId}/role`,
      updateDepartmentMemberRoleIn,options
    );
  }



export const getPutApiDepartmentsDepartmentIdMembersUserIdRoleMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiDepartmentsDepartmentIdMembersUserIdRole>>, TError,{departmentId: number;userId: number;data: UpdateDepartmentMemberRoleIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiDepartmentsDepartmentIdMembersUserIdRole>>, TError,{departmentId: number;userId: number;data: UpdateDepartmentMemberRoleIn}, TContext> => {

const mutationKey = ['putApiDepartmentsDepartmentIdMembersUserIdRole'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiDepartmentsDepartmentIdMembersUserIdRole>>, {departmentId: number;userId: number;data: UpdateDepartmentMemberRoleIn}> = (props) => {
          const {departmentId,userId,data} = props ?? {};

          return  putApiDepartmentsDepartmentIdMembersUserIdRole(departmentId,userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiDepartmentsDepartmentIdMembersUserIdRoleMutationResult = NonNullable<Awaited<ReturnType<typeof putApiDepartmentsDepartmentIdMembersUserIdRole>>>
    export type PutApiDepartmentsDepartmentIdMembersUserIdRoleMutationBody = UpdateDepartmentMemberRoleIn
    export type PutApiDepartmentsDepartmentIdMembersUserIdRoleMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥Êñ∞ÈÉ®Èó®ÊàêÂëòËßíËâ≤ÔºàÈúÄË¶ÅÈÉ®Èó®ÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ
 */
export const usePutApiDepartmentsDepartmentIdMembersUserIdRole = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiDepartmentsDepartmentIdMembersUserIdRole>>, TError,{departmentId: number;userId: number;data: UpdateDepartmentMemberRoleIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiDepartmentsDepartmentIdMembersUserIdRole>>,
        TError,
        {departmentId: number;userId: number;data: UpdateDepartmentMemberRoleIn},
        TContext
      > => {

      const mutationOptions = getPutApiDepartmentsDepartmentIdMembersUserIdRoleMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
