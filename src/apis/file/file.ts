/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * APIFlask
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ChangeFilePermissionsIn,
  ChangeFilePermissionsOut,
  Generated,
  GetApiFileFileIdParams,
  HTTPError,
  UploadAvatarIn,
  UploadAvatarOut,
  UploadKnowledgeIn,
  UploadKnowledgeOut,
  ValidationError
} from '.././model';





/**
 * @summary ‰∏ä‰º†Â§¥ÂÉè
 */
export const postApiFileAvatar = (
    uploadAvatarIn: UploadAvatarIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadAvatarOut>> => {
    
    const formData = new FormData();
if(uploadAvatarIn.file !== undefined) {
 formData.append(`file`, uploadAvatarIn.file)
 }

    return axios.default.post(
      `/api/file/avatar`,
      formData,options
    );
  }



export const getPostApiFileAvatarMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileAvatar>>, TError,{data: UploadAvatarIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiFileAvatar>>, TError,{data: UploadAvatarIn}, TContext> => {

const mutationKey = ['postApiFileAvatar'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFileAvatar>>, {data: UploadAvatarIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiFileAvatar(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFileAvatarMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFileAvatar>>>
    export type PostApiFileAvatarMutationBody = UploadAvatarIn
    export type PostApiFileAvatarMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ‰∏ä‰º†Â§¥ÂÉè
 */
export const usePostApiFileAvatar = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileAvatar>>, TError,{data: UploadAvatarIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiFileAvatar>>,
        TError,
        {data: UploadAvatarIn},
        TContext
      > => {

      const mutationOptions = getPostApiFileAvatarMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary ‰∏ä‰º†‰∏Ä‰∏™Êñá‰ª∂Âà∞Áü•ËØÜÂ∫ìÔºàÊúçÂä°Âô®Ôºâ
 */
export const postApiFileKnowledge = (
    uploadKnowledgeIn: UploadKnowledgeIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadKnowledgeOut>> => {
    
    const formData = new FormData();
if(uploadKnowledgeIn.file !== undefined) {
 formData.append(`file`, uploadKnowledgeIn.file)
 }
if(uploadKnowledgeIn.isPublic !== undefined) {
 formData.append(`isPublic`, uploadKnowledgeIn.isPublic.toString())
 }
if(uploadKnowledgeIn.isKnowledgeFile !== undefined) {
 formData.append(`isKnowledgeFile`, uploadKnowledgeIn.isKnowledgeFile.toString())
 }
if(uploadKnowledgeIn.isDepartment !== undefined) {
 formData.append(`isDepartment`, uploadKnowledgeIn.isDepartment.toString())
 }

    return axios.default.post(
      `/api/file/knowledge`,
      formData,options
    );
  }



export const getPostApiFileKnowledgeMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileKnowledge>>, TError,{data: UploadKnowledgeIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiFileKnowledge>>, TError,{data: UploadKnowledgeIn}, TContext> => {

const mutationKey = ['postApiFileKnowledge'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFileKnowledge>>, {data: UploadKnowledgeIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiFileKnowledge(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFileKnowledgeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFileKnowledge>>>
    export type PostApiFileKnowledgeMutationBody = UploadKnowledgeIn
    export type PostApiFileKnowledgeMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ‰∏ä‰º†‰∏Ä‰∏™Êñá‰ª∂Âà∞Áü•ËØÜÂ∫ìÔºàÊúçÂä°Âô®Ôºâ
 */
export const usePostApiFileKnowledge = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileKnowledge>>, TError,{data: UploadKnowledgeIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiFileKnowledge>>,
        TError,
        {data: UploadKnowledgeIn},
        TContext
      > => {

      const mutationOptions = getPostApiFileKnowledgeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØÊàñ‰∏ãËΩΩÊñá‰ª∂
 */
export const getApiFileFileId = (
    fileId: number,
    params?: GetApiFileFileIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/file/${fileId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiFileFileIdQueryKey = (fileId: number,
    params?: GetApiFileFileIdParams,) => {
    return [`/api/file/${fileId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiFileFileIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiFileFileId>>, TError = AxiosError<HTTPError | ValidationError>>(fileId: number,
    params?: GetApiFileFileIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFileFileId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFileFileIdQueryKey(fileId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFileFileId>>> = ({ signal }) => getApiFileFileId(fileId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(fileId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFileFileId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiFileFileIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFileFileId>>>
export type GetApiFileFileIdQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØÊàñ‰∏ãËΩΩÊñá‰ª∂
 */

export function useGetApiFileFileId<TData = Awaited<ReturnType<typeof getApiFileFileId>>, TError = AxiosError<HTTPError | ValidationError>>(
 fileId: number,
    params?: GetApiFileFileIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFileFileId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiFileFileIdQueryOptions(fileId,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Âà†Èô§Êñá‰ª∂
 */
export const deleteApiFileFileId = (
    fileId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Generated>> => {
    
    
    return axios.default.delete(
      `/api/file/${fileId}`,options
    );
  }



export const getDeleteApiFileFileIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFileFileId>>, TError,{fileId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiFileFileId>>, TError,{fileId: string}, TContext> => {

const mutationKey = ['deleteApiFileFileId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiFileFileId>>, {fileId: string}> = (props) => {
          const {fileId} = props ?? {};

          return  deleteApiFileFileId(fileId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiFileFileIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiFileFileId>>>
    
    export type DeleteApiFileFileIdMutationError = AxiosError<HTTPError>

    /**
 * @summary Âà†Èô§Êñá‰ª∂
 */
export const useDeleteApiFileFileId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiFileFileId>>, TError,{fileId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiFileFileId>>,
        TError,
        {fileId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiFileFileIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Êõ¥Êñ∞Êñá‰ª∂ÁöÑÊùÉÈôêÔºàÂê´Áü•ËØÜÂ∫ìÂêåÊ≠•Ôºâ
 */
export const putApiFileFileIdPermissions = (
    fileId: string,
    changeFilePermissionsIn: ChangeFilePermissionsIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChangeFilePermissionsOut>> => {
    
    
    return axios.default.put(
      `/api/file/${fileId}/permissions`,
      changeFilePermissionsIn,options
    );
  }



export const getPutApiFileFileIdPermissionsMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>, TError,{fileId: string;data: ChangeFilePermissionsIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>, TError,{fileId: string;data: ChangeFilePermissionsIn}, TContext> => {

const mutationKey = ['putApiFileFileIdPermissions'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>, {fileId: string;data: ChangeFilePermissionsIn}> = (props) => {
          const {fileId,data} = props ?? {};

          return  putApiFileFileIdPermissions(fileId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiFileFileIdPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>>
    export type PutApiFileFileIdPermissionsMutationBody = ChangeFilePermissionsIn
    export type PutApiFileFileIdPermissionsMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥Êñ∞Êñá‰ª∂ÁöÑÊùÉÈôêÔºàÂê´Áü•ËØÜÂ∫ìÂêåÊ≠•Ôºâ
 */
export const usePutApiFileFileIdPermissions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFileFileIdPermissions>>, TError,{fileId: string;data: ChangeFilePermissionsIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiFileFileIdPermissions>>,
        TError,
        {fileId: string;data: ChangeFilePermissionsIn},
        TContext
      > => {

      const mutationOptions = getPutApiFileFileIdPermissionsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    