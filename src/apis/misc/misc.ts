/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * APIFlask
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Status
} from '.././model';





/**
 * @summary Ëé∑ÂèñÊúçÂä°Âô®Áä∂ÊÄÅ
 */
export const getApiHealth = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Status>> => {
    
    
    return axios.default.get(
      `/api/health`,options
    );
  }


export const getGetApiHealthQueryKey = () => {
    return [`/api/health`] as const;
    }

    
export const getGetApiHealthQueryOptions = <TData = Awaited<ReturnType<typeof getApiHealth>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiHealth>>> = ({ signal }) => getApiHealth({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getApiHealth>>>
export type GetApiHealthQueryError = AxiosError<unknown>


/**
 * @summary Ëé∑ÂèñÊúçÂä°Âô®Áä∂ÊÄÅ
 */

export function useGetApiHealth<TData = Awaited<ReturnType<typeof getApiHealth>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiHealthQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



