/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AIOffice
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetFriendOut,
  GetFriendRequestsOut,
  GetFriendsOut,
  HTTPError,
  HandleFriendRequestIn,
  HandleFriendRequestOut,
  SubmitFriendRequestIn,
  SubmitFriendRequestOut,
  ValidationError
} from '../aIOffice.schemas';





/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂ•ΩÂèã
 */
export const getApiFriends = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFriendsOut>> => {
    
    
    return axios.default.get(
      `/api/friends`,options
    );
  }


export const getGetApiFriendsQueryKey = () => {
    return [`/api/friends`] as const;
    }

    
export const getGetApiFriendsQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriends>>, TError = AxiosError<HTTPError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriends>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriends>>> = ({ signal }) => getApiFriends({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriends>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiFriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriends>>>
export type GetApiFriendsQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂ•ΩÂèã
 */

export function useGetApiFriends<TData = Awaited<ReturnType<typeof getApiFriends>>, TError = AxiosError<HTTPError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriends>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiFriendsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂ•ΩÂèãËØ∑Ê±Ç
 */
export const getApiFriendRequests = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFriendRequestsOut>> => {
    
    
    return axios.default.get(
      `/api/friend-requests`,options
    );
  }


export const getGetApiFriendRequestsQueryKey = () => {
    return [`/api/friend-requests`] as const;
    }

    
export const getGetApiFriendRequestsQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriendRequests>>, TError = AxiosError<HTTPError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriendRequests>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendRequestsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriendRequests>>> = ({ signal }) => getApiFriendRequests({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriendRequests>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiFriendRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriendRequests>>>
export type GetApiFriendRequestsQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂ•ΩÂèãËØ∑Ê±Ç
 */

export function useGetApiFriendRequests<TData = Awaited<ReturnType<typeof getApiFriendRequests>>, TError = AxiosError<HTTPError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriendRequests>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiFriendRequestsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ëé∑Âèñ‰∏Ä‰∏™Â•ΩÂèãÁöÑÁõ∏ÂÖ≥‰ø°ÊÅØ
 */
export const getApiFriendFriendId = (
    friendId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFriendOut>> => {
    
    
    return axios.default.get(
      `/api/friend/${friendId}`,options
    );
  }


export const getGetApiFriendFriendIdQueryKey = (friendId: number,) => {
    return [`/api/friend/${friendId}`] as const;
    }

    
export const getGetApiFriendFriendIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiFriendFriendId>>, TError = AxiosError<HTTPError | ValidationError>>(friendId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriendFriendId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFriendFriendIdQueryKey(friendId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFriendFriendId>>> = ({ signal }) => getApiFriendFriendId(friendId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(friendId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFriendFriendId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiFriendFriendIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFriendFriendId>>>
export type GetApiFriendFriendIdQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑Âèñ‰∏Ä‰∏™Â•ΩÂèãÁöÑÁõ∏ÂÖ≥‰ø°ÊÅØ
 */

export function useGetApiFriendFriendId<TData = Awaited<ReturnType<typeof getApiFriendFriendId>>, TError = AxiosError<HTTPError | ValidationError>>(
 friendId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiFriendFriendId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiFriendFriendIdQueryOptions(friendId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÂèëÈÄÅÂ•ΩÂèãËØ∑Ê±Ç
 */
export const postApiFriendRequestTargetId = (
    targetId: number,
    submitFriendRequestIn: SubmitFriendRequestIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SubmitFriendRequestOut>> => {
    
    
    return axios.default.post(
      `/api/friend-request/${targetId}`,
      submitFriendRequestIn,options
    );
  }



export const getPostApiFriendRequestTargetIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>, TError,{targetId: number;data: SubmitFriendRequestIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>, TError,{targetId: number;data: SubmitFriendRequestIn}, TContext> => {

const mutationKey = ['postApiFriendRequestTargetId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>, {targetId: number;data: SubmitFriendRequestIn}> = (props) => {
          const {targetId,data} = props ?? {};

          return  postApiFriendRequestTargetId(targetId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFriendRequestTargetIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>>
    export type PostApiFriendRequestTargetIdMutationBody = SubmitFriendRequestIn
    export type PostApiFriendRequestTargetIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂèëÈÄÅÂ•ΩÂèãËØ∑Ê±Ç
 */
export const usePostApiFriendRequestTargetId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFriendRequestTargetId>>, TError,{targetId: number;data: SubmitFriendRequestIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiFriendRequestTargetId>>,
        TError,
        {targetId: number;data: SubmitFriendRequestIn},
        TContext
      > => {

      const mutationOptions = getPostApiFriendRequestTargetIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary ÂÆ°ÊâπÂ•ΩÂèãËØ∑Ê±Ç
 */
export const putApiFriendRequestRequestId = (
    requestId: number,
    handleFriendRequestIn: HandleFriendRequestIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandleFriendRequestOut>> => {
    
    
    return axios.default.put(
      `/api/friend-request/${requestId}`,
      handleFriendRequestIn,options
    );
  }



export const getPutApiFriendRequestRequestIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>, TError,{requestId: number;data: HandleFriendRequestIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>, TError,{requestId: number;data: HandleFriendRequestIn}, TContext> => {

const mutationKey = ['putApiFriendRequestRequestId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>, {requestId: number;data: HandleFriendRequestIn}> = (props) => {
          const {requestId,data} = props ?? {};

          return  putApiFriendRequestRequestId(requestId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiFriendRequestRequestIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>>
    export type PutApiFriendRequestRequestIdMutationBody = HandleFriendRequestIn
    export type PutApiFriendRequestRequestIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂÆ°ÊâπÂ•ΩÂèãËØ∑Ê±Ç
 */
export const usePutApiFriendRequestRequestId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiFriendRequestRequestId>>, TError,{requestId: number;data: HandleFriendRequestIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiFriendRequestRequestId>>,
        TError,
        {requestId: number;data: HandleFriendRequestIn},
        TContext
      > => {

      const mutationOptions = getPutApiFriendRequestRequestIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    