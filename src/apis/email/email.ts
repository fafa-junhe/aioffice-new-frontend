/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * APIFlask
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AddTagsIn,
  ArchiveEmailIn,
  GetApiEmailsParams,
  GetApiEmailsSearchParams,
  GetEmailAccountOut,
  GetEmailsOut,
  HTTPError,
  MarkSpamIn,
  MessageOnly,
  ReceiveEmailIn,
  ReceiveEmailOut,
  ReplyEmailIn,
  ReplyEmailOut,
  SearchEmailsOut,
  SendEmailIn,
  SendEmailOut,
  TrashEmailIn,
  UpdateEmailInUpdate,
  UpdateEmailOut,
  ValidationError
} from '.././model';





/**
 * @summary ÂèëÈÄÅ‰∏ÄÂ∞ÅÈÇÆ‰ª∂ÔºàÂèØËÉΩÊúâbugÔºâ
 */
export const postApiEmail = (
    sendEmailIn: SendEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SendEmailOut>> => {
    
    
    return axios.default.post(
      `/api/email`,
      sendEmailIn,options
    );
  }



export const getPostApiEmailMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmail>>, TError,{data: SendEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmail>>, TError,{data: SendEmailIn}, TContext> => {

const mutationKey = ['postApiEmail'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmail>>, {data: SendEmailIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmail>>>
    export type PostApiEmailMutationBody = SendEmailIn
    export type PostApiEmailMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂèëÈÄÅ‰∏ÄÂ∞ÅÈÇÆ‰ª∂ÔºàÂèØËÉΩÊúâbugÔºâ
 */
export const usePostApiEmail = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmail>>, TError,{data: SendEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmail>>,
        TError,
        {data: SendEmailIn},
        TContext
      > => {

      const mutationOptions = getPostApiEmailMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * queryÂèÇÊï∞:
- type: all(ÈªòËÆ§)|sent|received - Êü•ËØ¢ÊâÄÊúâ/ÂèëÈÄÅÁöÑ/Êî∂Âà∞ÁöÑÈÇÆ‰ª∂
 * @summary Ëé∑ÂèñÁî®Êà∑ÈÇÆ‰ª∂
 */
export const getApiEmails = (
    params?: GetApiEmailsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetEmailsOut>> => {
    
    
    return axios.default.get(
      `/api/emails`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiEmailsQueryKey = (params?: GetApiEmailsParams,) => {
    return [`/api/emails`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiEmailsQueryOptions = <TData = Awaited<ReturnType<typeof getApiEmails>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiEmailsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmails>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEmailsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEmails>>> = ({ signal }) => getApiEmails(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEmails>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiEmailsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmails>>>
export type GetApiEmailsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÁî®Êà∑ÈÇÆ‰ª∂
 */

export function useGetApiEmails<TData = Awaited<ReturnType<typeof getApiEmails>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiEmailsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmails>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiEmailsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Êé•Êî∂ÈÇÆ‰ª∂ÔºàÂÜÖÈÉ®‰ΩøÁî®Ôºâ
 */
export const postApiEmailReceive = (
    receiveEmailIn: ReceiveEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ReceiveEmailOut>> => {
    
    
    return axios.default.post(
      `/api/email/receive`,
      receiveEmailIn,options
    );
  }



export const getPostApiEmailReceiveMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailReceive>>, TError,{data: ReceiveEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmailReceive>>, TError,{data: ReceiveEmailIn}, TContext> => {

const mutationKey = ['postApiEmailReceive'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmailReceive>>, {data: ReceiveEmailIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiEmailReceive(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailReceiveMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmailReceive>>>
    export type PostApiEmailReceiveMutationBody = ReceiveEmailIn
    export type PostApiEmailReceiveMutationError = AxiosError<ValidationError>

    /**
 * @summary Êé•Êî∂ÈÇÆ‰ª∂ÔºàÂÜÖÈÉ®‰ΩøÁî®Ôºâ
 */
export const usePostApiEmailReceive = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailReceive>>, TError,{data: ReceiveEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmailReceive>>,
        TError,
        {data: ReceiveEmailIn},
        TContext
      > => {

      const mutationOptions = getPostApiEmailReceiveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ëé∑ÂèñÁî®Êà∑ÁöÑÈÇÆÁÆ±Ë¥¶Âè∑Áõ∏ÂÖ≥‰ø°ÊÅØ
 */
export const getApiEmailAccount = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetEmailAccountOut>> => {
    
    
    return axios.default.get(
      `/api/email/account`,options
    );
  }


export const getGetApiEmailAccountQueryKey = () => {
    return [`/api/email/account`] as const;
    }

    
export const getGetApiEmailAccountQueryOptions = <TData = Awaited<ReturnType<typeof getApiEmailAccount>>, TError = AxiosError<HTTPError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmailAccount>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEmailAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEmailAccount>>> = ({ signal }) => getApiEmailAccount({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEmailAccount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiEmailAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmailAccount>>>
export type GetApiEmailAccountQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÁî®Êà∑ÁöÑÈÇÆÁÆ±Ë¥¶Âè∑Áõ∏ÂÖ≥‰ø°ÊÅØ
 */

export function useGetApiEmailAccount<TData = Awaited<ReturnType<typeof getApiEmailAccount>>, TError = AxiosError<HTTPError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmailAccount>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiEmailAccountQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ‰øÆÊîπÁî®Êà∑ÁöÑÈÇÆÁÆ±Ë¥¶Âè∑Áõ∏ÂÖ≥‰ø°ÊÅØ
 */
export const putApiEmailAccount = (
    updateEmailInUpdate: UpdateEmailInUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateEmailOut>> => {
    
    
    return axios.default.put(
      `/api/email/account`,
      updateEmailInUpdate,options
    );
  }



export const getPutApiEmailAccountMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailAccount>>, TError,{data: UpdateEmailInUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEmailAccount>>, TError,{data: UpdateEmailInUpdate}, TContext> => {

const mutationKey = ['putApiEmailAccount'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEmailAccount>>, {data: UpdateEmailInUpdate}> = (props) => {
          const {data} = props ?? {};

          return  putApiEmailAccount(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEmailAccountMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmailAccount>>>
    export type PutApiEmailAccountMutationBody = UpdateEmailInUpdate
    export type PutApiEmailAccountMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ‰øÆÊîπÁî®Êà∑ÁöÑÈÇÆÁÆ±Ë¥¶Âè∑Áõ∏ÂÖ≥‰ø°ÊÅØ
 */
export const usePutApiEmailAccount = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailAccount>>, TError,{data: UpdateEmailInUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiEmailAccount>>,
        TError,
        {data: UpdateEmailInUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiEmailAccountMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary ÊêúÁ¥¢Áî®Êà∑ÁöÑÈÇÆ‰ª∂
 */
export const getApiEmailsSearch = (
    params: GetApiEmailsSearchParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SearchEmailsOut>> => {
    
    
    return axios.default.get(
      `/api/emails/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiEmailsSearchQueryKey = (params: GetApiEmailsSearchParams,) => {
    return [`/api/emails/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiEmailsSearchQueryOptions = <TData = Awaited<ReturnType<typeof getApiEmailsSearch>>, TError = AxiosError<HTTPError | ValidationError>>(params: GetApiEmailsSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmailsSearch>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEmailsSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEmailsSearch>>> = ({ signal }) => getApiEmailsSearch(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEmailsSearch>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiEmailsSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEmailsSearch>>>
export type GetApiEmailsSearchQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary ÊêúÁ¥¢Áî®Êà∑ÁöÑÈÇÆ‰ª∂
 */

export function useGetApiEmailsSearch<TData = Awaited<ReturnType<typeof getApiEmailsSearch>>, TError = AxiosError<HTTPError | ValidationError>>(
 params: GetApiEmailsSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiEmailsSearch>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiEmailsSearchQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ê∑ªÂä†ÈÇÆ‰ª∂Ê†áÁ≠æ
 */
export const postApiEmailEmailIdTags = (
    emailId: number,
    addTagsIn: AddTagsIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageOnly>> => {
    
    
    return axios.default.post(
      `/api/email/${emailId}/tags`,
      addTagsIn,options
    );
  }



export const getPostApiEmailEmailIdTagsMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>, TError,{emailId: number;data: AddTagsIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>, TError,{emailId: number;data: AddTagsIn}, TContext> => {

const mutationKey = ['postApiEmailEmailIdTags'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>, {emailId: number;data: AddTagsIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  postApiEmailEmailIdTags(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailEmailIdTagsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>>
    export type PostApiEmailEmailIdTagsMutationBody = AddTagsIn
    export type PostApiEmailEmailIdTagsMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Ê∑ªÂä†ÈÇÆ‰ª∂Ê†áÁ≠æ
 */
export const usePostApiEmailEmailIdTags = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdTags>>, TError,{emailId: number;data: AddTagsIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmailEmailIdTags>>,
        TError,
        {emailId: number;data: AddTagsIn},
        TContext
      > => {

      const mutationOptions = getPostApiEmailEmailIdTagsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ê†áËÆ∞/ÂèñÊ∂àÊ†áËÆ∞ÂûÉÂúæÈÇÆ‰ª∂
 */
export const putApiEmailEmailIdSpam = (
    emailId: number,
    markSpamIn: MarkSpamIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageOnly>> => {
    
    
    return axios.default.put(
      `/api/email/${emailId}/spam`,
      markSpamIn,options
    );
  }



export const getPutApiEmailEmailIdSpamMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>, TError,{emailId: number;data: MarkSpamIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>, TError,{emailId: number;data: MarkSpamIn}, TContext> => {

const mutationKey = ['putApiEmailEmailIdSpam'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>, {emailId: number;data: MarkSpamIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  putApiEmailEmailIdSpam(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEmailEmailIdSpamMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>>
    export type PutApiEmailEmailIdSpamMutationBody = MarkSpamIn
    export type PutApiEmailEmailIdSpamMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Ê†áËÆ∞/ÂèñÊ∂àÊ†áËÆ∞ÂûÉÂúæÈÇÆ‰ª∂
 */
export const usePutApiEmailEmailIdSpam = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>, TError,{emailId: number;data: MarkSpamIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiEmailEmailIdSpam>>,
        TError,
        {emailId: number;data: MarkSpamIn},
        TContext
      > => {

      const mutationOptions = getPutApiEmailEmailIdSpamMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary ÁßªÂÖ•/ÁßªÂá∫ÂõûÊî∂Á´ô
 */
export const putApiEmailEmailIdTrash = (
    emailId: number,
    trashEmailIn: TrashEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageOnly>> => {
    
    
    return axios.default.put(
      `/api/email/${emailId}/trash`,
      trashEmailIn,options
    );
  }



export const getPutApiEmailEmailIdTrashMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>, TError,{emailId: number;data: TrashEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>, TError,{emailId: number;data: TrashEmailIn}, TContext> => {

const mutationKey = ['putApiEmailEmailIdTrash'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>, {emailId: number;data: TrashEmailIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  putApiEmailEmailIdTrash(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEmailEmailIdTrashMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>>
    export type PutApiEmailEmailIdTrashMutationBody = TrashEmailIn
    export type PutApiEmailEmailIdTrashMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÁßªÂÖ•/ÁßªÂá∫ÂõûÊî∂Á´ô
 */
export const usePutApiEmailEmailIdTrash = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>, TError,{emailId: number;data: TrashEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiEmailEmailIdTrash>>,
        TError,
        {emailId: number;data: TrashEmailIn},
        TContext
      > => {

      const mutationOptions = getPutApiEmailEmailIdTrashMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary ÂõûÂ§çÈÇÆ‰ª∂
 */
export const postApiEmailEmailIdReply = (
    emailId: number,
    replyEmailIn: ReplyEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ReplyEmailOut>> => {
    
    
    return axios.default.post(
      `/api/email/${emailId}/reply`,
      replyEmailIn,options
    );
  }



export const getPostApiEmailEmailIdReplyMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>, TError,{emailId: number;data: ReplyEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>, TError,{emailId: number;data: ReplyEmailIn}, TContext> => {

const mutationKey = ['postApiEmailEmailIdReply'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>, {emailId: number;data: ReplyEmailIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  postApiEmailEmailIdReply(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiEmailEmailIdReplyMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>>
    export type PostApiEmailEmailIdReplyMutationBody = ReplyEmailIn
    export type PostApiEmailEmailIdReplyMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂõûÂ§çÈÇÆ‰ª∂
 */
export const usePostApiEmailEmailIdReply = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEmailEmailIdReply>>, TError,{emailId: number;data: ReplyEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiEmailEmailIdReply>>,
        TError,
        {emailId: number;data: ReplyEmailIn},
        TContext
      > => {

      const mutationOptions = getPostApiEmailEmailIdReplyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary ÂΩíÊ°£/ÂèñÊ∂àÂΩíÊ°£ÈÇÆ‰ª∂
 */
export const putApiEmailEmailIdArchive = (
    emailId: number,
    archiveEmailIn: ArchiveEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageOnly>> => {
    
    
    return axios.default.put(
      `/api/email/${emailId}/archive`,
      archiveEmailIn,options
    );
  }



export const getPutApiEmailEmailIdArchiveMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>, TError,{emailId: number;data: ArchiveEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>, TError,{emailId: number;data: ArchiveEmailIn}, TContext> => {

const mutationKey = ['putApiEmailEmailIdArchive'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>, {emailId: number;data: ArchiveEmailIn}> = (props) => {
          const {emailId,data} = props ?? {};

          return  putApiEmailEmailIdArchive(emailId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEmailEmailIdArchiveMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>>
    export type PutApiEmailEmailIdArchiveMutationBody = ArchiveEmailIn
    export type PutApiEmailEmailIdArchiveMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂΩíÊ°£/ÂèñÊ∂àÂΩíÊ°£ÈÇÆ‰ª∂
 */
export const usePutApiEmailEmailIdArchive = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>, TError,{emailId: number;data: ArchiveEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiEmailEmailIdArchive>>,
        TError,
        {emailId: number;data: ArchiveEmailIn},
        TContext
      > => {

      const mutationOptions = getPutApiEmailEmailIdArchiveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    