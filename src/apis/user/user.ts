/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AIOffice
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ChangePasswordIn,
  ChangePasswordOut,
  CheckAvailabilityOut,
  CreateUserIn,
  CreateUserOut,
  GetApiUserCheckAvailabilityParams,
  GetApiUsersParams,
  GetApiUsersSearchParams,
  GetUsersOut,
  HTTPError,
  LoginByEmailIn,
  LoginIn,
  LoginOut,
  RefreshTokenOut,
  SendCodeIn,
  SendCodeOut,
  UpdateUserInUpdate,
  UpdateUserOut,
  User,
  ValidationError
} from '../aIOffice.schemas';





/**
 * @summary Ê≥®ÂÜåÊñ∞Áî®Êà∑
 */
export const postApiUser = (
    createUserIn: CreateUserIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateUserOut>> => {
    
    
    return axios.default.post(
      `/api/user`,
      createUserIn,options
    );
  }



export const getPostApiUserMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUser>>, TError,{data: CreateUserIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUser>>, TError,{data: CreateUserIn}, TContext> => {

const mutationKey = ['postApiUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUser>>, {data: CreateUserIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUserMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUser>>>
    export type PostApiUserMutationBody = CreateUserIn
    export type PostApiUserMutationError = AxiosError<ValidationError>

    /**
 * @summary Ê≥®ÂÜåÊñ∞Áî®Êà∑
 */
export const usePostApiUser = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUser>>, TError,{data: CreateUserIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiUser>>,
        TError,
        {data: CreateUserIn},
        TContext
      > => {

      const mutationOptions = getPostApiUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Êõ¥Êñ∞ÂΩìÂâçÁôªÂΩïÁî®Êà∑‰ø°ÊÅØ
 */
export const putApiUser = (
    updateUserInUpdate: UpdateUserInUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateUserOut>> => {
    
    
    return axios.default.put(
      `/api/user`,
      updateUserInUpdate,options
    );
  }



export const getPutApiUserMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UpdateUserInUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UpdateUserInUpdate}, TContext> => {

const mutationKey = ['putApiUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUser>>, {data: UpdateUserInUpdate}> = (props) => {
          const {data} = props ?? {};

          return  putApiUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUserMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUser>>>
    export type PutApiUserMutationBody = UpdateUserInUpdate
    export type PutApiUserMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥Êñ∞ÂΩìÂâçÁôªÂΩïÁî®Êà∑‰ø°ÊÅØ
 */
export const usePutApiUser = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UpdateUserInUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiUser>>,
        TError,
        {data: UpdateUserInUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ëé∑ÂèñÊâÄÊúâÁî®Êà∑ÂàóË°®
 */
export const getApiUsers = (
    params?: GetApiUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersOut>> => {
    
    
    return axios.default.get(
      `/api/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiUsersQueryKey = (params?: GetApiUsersParams,) => {
    return [`/api/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsers>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) => getApiUsers(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâÁî®Êà∑ÂàóË°®
 */

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUsersQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÂèëÈÄÅÈ™åËØÅÁ†ÅÁî®‰∫éÈÇÆ‰ª∂ÁôªÂΩï
 */
export const postApiAuthCode = (
    sendCodeIn: SendCodeIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SendCodeOut>> => {
    
    
    return axios.default.post(
      `/api/auth/code`,
      sendCodeIn,options
    );
  }



export const getPostApiAuthCodeMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCode>>, TError,{data: SendCodeIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCode>>, TError,{data: SendCodeIn}, TContext> => {

const mutationKey = ['postApiAuthCode'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthCode>>, {data: SendCodeIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthCode(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthCode>>>
    export type PostApiAuthCodeMutationBody = SendCodeIn
    export type PostApiAuthCodeMutationError = AxiosError<ValidationError>

    /**
 * @summary ÂèëÈÄÅÈ™åËØÅÁ†ÅÁî®‰∫éÈÇÆ‰ª∂ÁôªÂΩï
 */
export const usePostApiAuthCode = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthCode>>, TError,{data: SendCodeIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthCode>>,
        TError,
        {data: SendCodeIn},
        TContext
      > => {

      const mutationOptions = getPostApiAuthCodeMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Áî®Êà∑ÁôªÂΩïËé∑ÂèñËÆøÈóÆ‰ª§Áâå
 */
export const postApiAuthLogin = (
    loginIn: LoginIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoginOut>> => {
    
    
    return axios.default.post(
      `/api/auth/login`,
      loginIn,options
    );
  }



export const getPostApiAuthLoginMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginIn}, TContext> => {

const mutationKey = ['postApiAuthLogin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: LoginIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = LoginIn
    export type PostApiAuthLoginMutationError = AxiosError<ValidationError>

    /**
 * @summary Áî®Êà∑ÁôªÂΩïËé∑ÂèñËÆøÈóÆ‰ª§Áâå
 */
export const usePostApiAuthLogin = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: LoginIn},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary ‰ΩøÁî®Âà∑Êñ∞‰ª§ÁâåËé∑ÂèñÊñ∞ÁöÑËÆøÈóÆ‰ª§Áâå
 */
export const postApiAuthRefresh = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RefreshTokenOut>> => {
    
    
    return axios.default.post(
      `/api/auth/refresh`,undefined,options
    );
  }



export const getPostApiAuthRefreshMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,void, TContext> => {

const mutationKey = ['postApiAuthRefresh'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthRefresh>>, void> = () => {
          

          return  postApiAuthRefresh(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRefresh>>>
    
    export type PostApiAuthRefreshMutationError = AxiosError<HTTPError>

    /**
 * @summary ‰ΩøÁî®Âà∑Êñ∞‰ª§ÁâåËé∑ÂèñÊñ∞ÁöÑËÆøÈóÆ‰ª§Áâå
 */
export const usePostApiAuthRefresh = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthRefresh>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiAuthRefreshMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ê®°Á≥äÊêúÁ¥¢Áî®Êà∑
 */
export const getApiUsersSearch = (
    params: GetApiUsersSearchParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersOut>> => {
    
    
    return axios.default.get(
      `/api/users/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiUsersSearchQueryKey = (params: GetApiUsersSearchParams,) => {
    return [`/api/users/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersSearchQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersSearch>>, TError = AxiosError<ValidationError>>(params: GetApiUsersSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersSearch>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersSearch>>> = ({ signal }) => getApiUsersSearch(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersSearch>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsersSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersSearch>>>
export type GetApiUsersSearchQueryError = AxiosError<ValidationError>


/**
 * @summary Ê®°Á≥äÊêúÁ¥¢Áî®Êà∑
 */

export function useGetApiUsersSearch<TData = Awaited<ReturnType<typeof getApiUsersSearch>>, TError = AxiosError<ValidationError>>(
 params: GetApiUsersSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersSearch>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUsersSearchQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Êõ¥ÊîπÂΩìÂâçÁî®Êà∑ÁöÑÂØÜÁ†Å
 */
export const putApiUserPassword = (
    changePasswordIn: ChangePasswordIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChangePasswordOut>> => {
    
    
    return axios.default.put(
      `/api/user/password`,
      changePasswordIn,options
    );
  }



export const getPutApiUserPasswordMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserPassword>>, TError,{data: ChangePasswordIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserPassword>>, TError,{data: ChangePasswordIn}, TContext> => {

const mutationKey = ['putApiUserPassword'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserPassword>>, {data: ChangePasswordIn}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserPassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUserPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserPassword>>>
    export type PutApiUserPasswordMutationBody = ChangePasswordIn
    export type PutApiUserPasswordMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary Êõ¥ÊîπÂΩìÂâçÁî®Êà∑ÁöÑÂØÜÁ†Å
 */
export const usePutApiUserPassword = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserPassword>>, TError,{data: ChangePasswordIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiUserPassword>>,
        TError,
        {data: ChangePasswordIn},
        TContext
      > => {

      const mutationOptions = getPutApiUserPasswordMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ëé∑ÂèñÁî®Êà∑ËØ¶ÁªÜ‰ø°ÊÅØ
 */
export const getApiUserUserId = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.default.get(
      `/api/user/${userId}`,options
    );
  }


export const getGetApiUserUserIdQueryKey = (userId: string,) => {
    return [`/api/user/${userId}`] as const;
    }

    
export const getGetApiUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<HTTPError>>(userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserUserId>>> = ({ signal }) => getApiUserUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserUserId>>>
export type GetApiUserUserIdQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÁî®Êà∑ËØ¶ÁªÜ‰ø°ÊÅØ
 */

export function useGetApiUserUserId<TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = AxiosError<HTTPError>>(
 userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Áî®Êà∑ÈÄöËøáÈÇÆÁÆ±ÁôªÂΩïËé∑ÂèñËÆøÈóÆ‰ª§Áâå
 */
export const postApiAuthLoginEmail = (
    loginByEmailIn: LoginByEmailIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoginOut>> => {
    
    
    return axios.default.post(
      `/api/auth/login/email`,
      loginByEmailIn,options
    );
  }



export const getPostApiAuthLoginEmailMutationOptions = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginEmail>>, TError,{data: LoginByEmailIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginEmail>>, TError,{data: LoginByEmailIn}, TContext> => {

const mutationKey = ['postApiAuthLoginEmail'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLoginEmail>>, {data: LoginByEmailIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLoginEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLoginEmail>>>
    export type PostApiAuthLoginEmailMutationBody = LoginByEmailIn
    export type PostApiAuthLoginEmailMutationError = AxiosError<ValidationError>

    /**
 * @summary Áî®Êà∑ÈÄöËøáÈÇÆÁÆ±ÁôªÂΩïËé∑ÂèñËÆøÈóÆ‰ª§Áâå
 */
export const usePostApiAuthLoginEmail = <TError = AxiosError<ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginEmail>>, TError,{data: LoginByEmailIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLoginEmail>>,
        TError,
        {data: LoginByEmailIn},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginEmailMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ê£ÄÊü•Áî®Êà∑ÂêçÊàñÈÇÆÁÆ±ÊòØÂê¶ÂèØÁî®
 */
export const getApiUserCheckAvailability = (
    params?: GetApiUserCheckAvailabilityParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CheckAvailabilityOut>> => {
    
    
    return axios.default.get(
      `/api/user/check-availability`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiUserCheckAvailabilityQueryKey = (params?: GetApiUserCheckAvailabilityParams,) => {
    return [`/api/user/check-availability`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUserCheckAvailabilityQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError = AxiosError<ValidationError>>(params?: GetApiUserCheckAvailabilityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserCheckAvailabilityQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserCheckAvailability>>> = ({ signal }) => getApiUserCheckAvailability(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUserCheckAvailabilityQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserCheckAvailability>>>
export type GetApiUserCheckAvailabilityQueryError = AxiosError<ValidationError>


/**
 * @summary Ê£ÄÊü•Áî®Êà∑ÂêçÊàñÈÇÆÁÆ±ÊòØÂê¶ÂèØÁî®
 */

export function useGetApiUserCheckAvailability<TData = Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError = AxiosError<ValidationError>>(
 params?: GetApiUserCheckAvailabilityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserCheckAvailability>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUserCheckAvailabilityQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



