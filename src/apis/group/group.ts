/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AIOffice
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateAnnouncementIn,
  CreateAnnouncementOut,
  CreateGroupIn,
  CreateGroupOut,
  DeleteAnnouncementOut,
  DeleteGroupOut,
  GetAnnouncementsOut,
  GetApiGroupGroupIdAnnouncementsParams,
  GetApiGroupGroupIdJoinRequestsParams,
  GetApiGroupsParams,
  GetApiManageableJoinRequestsParams,
  GetGroupJoinRequestsOut,
  GetGroupMembersOut,
  GetGroupOut,
  GetUserGroupsOut,
  GroupUpdate,
  HTTPError,
  HandleGroupJoinRequestOut,
  InviteGroupMemberOut,
  PutApiJoinRequestRequestIdParams,
  SubmitGroupJoinRequestOut,
  UpdateGroupOut,
  ValidationError
} from '../aIOffice.schemas';





/**
 * @summary ÂàõÂª∫Áæ§ÁªÑ
 */
export const postApiGroup = (
    createGroupIn: CreateGroupIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateGroupOut>> => {
    
    
    return axios.default.post(
      `/api/group`,
      createGroupIn,options
    );
  }



export const getPostApiGroupMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroup>>, TError,{data: CreateGroupIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroup>>, TError,{data: CreateGroupIn}, TContext> => {

const mutationKey = ['postApiGroup'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroup>>, {data: CreateGroupIn}> = (props) => {
          const {data} = props ?? {};

          return  postApiGroup(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroup>>>
    export type PostApiGroupMutationBody = CreateGroupIn
    export type PostApiGroupMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂàõÂª∫Áæ§ÁªÑ
 */
export const usePostApiGroup = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroup>>, TError,{data: CreateGroupIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroup>>,
        TError,
        {data: CreateGroupIn},
        TContext
      > => {

      const mutationOptions = getPostApiGroupMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ëé∑ÂèñÁî®Êà∑ÁöÑÊâÄÊúâÁæ§ÁªÑ
 */
export const getApiGroups = (
    params?: GetApiGroupsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUserGroupsOut>> => {
    
    
    return axios.default.get(
      `/api/groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiGroupsQueryKey = (params?: GetApiGroupsParams,) => {
    return [`/api/groups`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroups>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiGroupsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroups>>> = ({ signal }) => getApiGroups(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroups>>>
export type GetApiGroupsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÁî®Êà∑ÁöÑÊâÄÊúâÁæ§ÁªÑ
 */

export function useGetApiGroups<TData = Awaited<ReturnType<typeof getApiGroups>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiGroupsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ëé∑ÂèñÁæ§ÁªÑ‰ø°ÊÅØ
 */
export const getApiGroupGroupId = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGroupOut>> => {
    
    
    return axios.default.get(
      `/api/group/${groupId}`,options
    );
  }


export const getGetApiGroupGroupIdQueryKey = (groupId: string,) => {
    return [`/api/group/${groupId}`] as const;
    }

    
export const getGetApiGroupGroupIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupGroupId>>, TError = AxiosError<HTTPError>>(groupId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupGroupIdQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupGroupId>>> = ({ signal }) => getApiGroupGroupId(groupId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupGroupId>>>
export type GetApiGroupGroupIdQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÁæ§ÁªÑ‰ø°ÊÅØ
 */

export function useGetApiGroupGroupId<TData = Awaited<ReturnType<typeof getApiGroupGroupId>>, TError = AxiosError<HTTPError>>(
 groupId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupGroupIdQueryOptions(groupId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ‰øÆÊîπÁæ§ÁªÑ‰ø°ÊÅØ
 */
export const putApiGroupGroupId = (
    groupId: string,
    groupUpdate: GroupUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateGroupOut>> => {
    
    
    return axios.default.put(
      `/api/group/${groupId}`,
      groupUpdate,options
    );
  }



export const getPutApiGroupGroupIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiGroupGroupId>>, TError,{groupId: string;data: GroupUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiGroupGroupId>>, TError,{groupId: string;data: GroupUpdate}, TContext> => {

const mutationKey = ['putApiGroupGroupId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiGroupGroupId>>, {groupId: string;data: GroupUpdate}> = (props) => {
          const {groupId,data} = props ?? {};

          return  putApiGroupGroupId(groupId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiGroupGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiGroupGroupId>>>
    export type PutApiGroupGroupIdMutationBody = GroupUpdate
    export type PutApiGroupGroupIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ‰øÆÊîπÁæ§ÁªÑ‰ø°ÊÅØ
 */
export const usePutApiGroupGroupId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiGroupGroupId>>, TError,{groupId: string;data: GroupUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiGroupGroupId>>,
        TError,
        {groupId: string;data: GroupUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiGroupGroupIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Âà†Èô§Áæ§ÁªÑ
 */
export const deleteApiGroupGroupId = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteGroupOut>> => {
    
    
    return axios.default.delete(
      `/api/group/${groupId}`,options
    );
  }



export const getDeleteApiGroupGroupIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupId>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupId>>, TError,{groupId: string}, TContext> => {

const mutationKey = ['deleteApiGroupGroupId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiGroupGroupId>>, {groupId: string}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteApiGroupGroupId(groupId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiGroupGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiGroupGroupId>>>
    
    export type DeleteApiGroupGroupIdMutationError = AxiosError<HTTPError>

    /**
 * @summary Âà†Èô§Áæ§ÁªÑ
 */
export const useDeleteApiGroupGroupId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupId>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiGroupGroupId>>,
        TError,
        {groupId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiGroupGroupIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ëé∑ÂèñÁæ§ÁªÑÁöÑÊâÄÊúâÊàêÂëò
 */
export const getApiGroupGroupIdMembers = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGroupMembersOut>> => {
    
    
    return axios.default.get(
      `/api/group/${groupId}/members`,options
    );
  }


export const getGetApiGroupGroupIdMembersQueryKey = (groupId: string,) => {
    return [`/api/group/${groupId}/members`] as const;
    }

    
export const getGetApiGroupGroupIdMembersQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError = AxiosError<HTTPError>>(groupId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupGroupIdMembersQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>> = ({ signal }) => getApiGroupGroupIdMembers(groupId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupGroupIdMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>>
export type GetApiGroupGroupIdMembersQueryError = AxiosError<HTTPError>


/**
 * @summary Ëé∑ÂèñÁæ§ÁªÑÁöÑÊâÄÊúâÊàêÂëò
 */

export function useGetApiGroupGroupIdMembers<TData = Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError = AxiosError<HTTPError>>(
 groupId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdMembers>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupGroupIdMembersQueryOptions(groupId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ÂèØÂÆ°ÊâπÁöÑÂä†Áæ§ËØ∑Ê±ÇÔºà‰Ωú‰∏∫Áæ§‰∏ªÊàñÁÆ°ÁêÜÂëòÔºâ
 */
export const getApiManageableJoinRequests = (
    params?: GetApiManageableJoinRequestsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGroupJoinRequestsOut>> => {
    
    
    return axios.default.get(
      `/api/manageable-join-requests`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiManageableJoinRequestsQueryKey = (params?: GetApiManageableJoinRequestsParams,) => {
    return [`/api/manageable-join-requests`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiManageableJoinRequestsQueryOptions = <TData = Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError = AxiosError<HTTPError | ValidationError>>(params?: GetApiManageableJoinRequestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiManageableJoinRequestsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiManageableJoinRequests>>> = ({ signal }) => getApiManageableJoinRequests(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiManageableJoinRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiManageableJoinRequests>>>
export type GetApiManageableJoinRequestsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ÂèØÂÆ°ÊâπÁöÑÂä†Áæ§ËØ∑Ê±ÇÔºà‰Ωú‰∏∫Áæ§‰∏ªÊàñÁÆ°ÁêÜÂëòÔºâ
 */

export function useGetApiManageableJoinRequests<TData = Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError = AxiosError<HTTPError | ValidationError>>(
 params?: GetApiManageableJoinRequestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiManageableJoinRequests>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiManageableJoinRequestsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÂÆ°ÊâπÂä†Áæ§ËØ∑Ê±Ç
 */
export const putApiJoinRequestRequestId = (
    requestId: number,
    params?: PutApiJoinRequestRequestIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandleGroupJoinRequestOut>> => {
    
    
    return axios.default.put(
      `/api/join-request/${requestId}`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPutApiJoinRequestRequestIdMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>, TError,{requestId: number;params?: PutApiJoinRequestRequestIdParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>, TError,{requestId: number;params?: PutApiJoinRequestRequestIdParams}, TContext> => {

const mutationKey = ['putApiJoinRequestRequestId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>, {requestId: number;params?: PutApiJoinRequestRequestIdParams}> = (props) => {
          const {requestId,params} = props ?? {};

          return  putApiJoinRequestRequestId(requestId,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiJoinRequestRequestIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>>
    
    export type PutApiJoinRequestRequestIdMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂÆ°ÊâπÂä†Áæ§ËØ∑Ê±Ç
 */
export const usePutApiJoinRequestRequestId = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiJoinRequestRequestId>>, TError,{requestId: number;params?: PutApiJoinRequestRequestIdParams}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiJoinRequestRequestId>>,
        TError,
        {requestId: number;params?: PutApiJoinRequestRequestIdParams},
        TContext
      > => {

      const mutationOptions = getPutApiJoinRequestRequestIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary ÂèëÂ∏ÉÂÖ¨Âëä
 */
export const postApiGroupGroupIdAnnouncement = (
    groupId: string,
    createAnnouncementIn: CreateAnnouncementIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateAnnouncementOut>> => {
    
    
    return axios.default.post(
      `/api/group/${groupId}/announcement`,
      createAnnouncementIn,options
    );
  }



export const getPostApiGroupGroupIdAnnouncementMutationOptions = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>, TError,{groupId: string;data: CreateAnnouncementIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>, TError,{groupId: string;data: CreateAnnouncementIn}, TContext> => {

const mutationKey = ['postApiGroupGroupIdAnnouncement'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>, {groupId: string;data: CreateAnnouncementIn}> = (props) => {
          const {groupId,data} = props ?? {};

          return  postApiGroupGroupIdAnnouncement(groupId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupGroupIdAnnouncementMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>>
    export type PostApiGroupGroupIdAnnouncementMutationBody = CreateAnnouncementIn
    export type PostApiGroupGroupIdAnnouncementMutationError = AxiosError<HTTPError | ValidationError>

    /**
 * @summary ÂèëÂ∏ÉÂÖ¨Âëä
 */
export const usePostApiGroupGroupIdAnnouncement = <TError = AxiosError<HTTPError | ValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>, TError,{groupId: string;data: CreateAnnouncementIn}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroupGroupIdAnnouncement>>,
        TError,
        {groupId: string;data: CreateAnnouncementIn},
        TContext
      > => {

      const mutationOptions = getPostApiGroupGroupIdAnnouncementMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Âà†Èô§‰∏Ä‰∏™ÂÖ¨Âëä
 */
export const deleteApiGroupGroupIdAnnouncement = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteAnnouncementOut>> => {
    
    
    return axios.default.delete(
      `/api/group/${groupId}/announcement`,options
    );
  }



export const getDeleteApiGroupGroupIdAnnouncementMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>, TError,{groupId: string}, TContext> => {

const mutationKey = ['deleteApiGroupGroupIdAnnouncement'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>, {groupId: string}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteApiGroupGroupIdAnnouncement(groupId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiGroupGroupIdAnnouncementMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>>
    
    export type DeleteApiGroupGroupIdAnnouncementMutationError = AxiosError<HTTPError>

    /**
 * @summary Âà†Èô§‰∏Ä‰∏™ÂÖ¨Âëä
 */
export const useDeleteApiGroupGroupIdAnnouncement = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiGroupGroupIdAnnouncement>>,
        TError,
        {groupId: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiGroupGroupIdAnnouncementMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Êèê‰∫§Âä†Áæ§ËØ∑Ê±Ç
 */
export const postApiGroupGroupIdJoinRequest = (
    groupId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SubmitGroupJoinRequestOut>> => {
    
    
    return axios.default.post(
      `/api/group/${groupId}/join-request`,undefined,options
    );
  }



export const getPostApiGroupGroupIdJoinRequestMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>, TError,{groupId: string}, TContext> => {

const mutationKey = ['postApiGroupGroupIdJoinRequest'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>, {groupId: string}> = (props) => {
          const {groupId} = props ?? {};

          return  postApiGroupGroupIdJoinRequest(groupId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupGroupIdJoinRequestMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>>
    
    export type PostApiGroupGroupIdJoinRequestMutationError = AxiosError<HTTPError>

    /**
 * @summary Êèê‰∫§Âä†Áæ§ËØ∑Ê±Ç
 */
export const usePostApiGroupGroupIdJoinRequest = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>, TError,{groupId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroupGroupIdJoinRequest>>,
        TError,
        {groupId: string},
        TContext
      > => {

      const mutationOptions = getPostApiGroupGroupIdJoinRequestMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Ëé∑ÂèñÊâÄÊúâ‰∏Ä‰∏™Áæ§ÁªÑÁöÑÂÖ¨Âëä
 */
export const getApiGroupGroupIdAnnouncements = (
    groupId: number,
    params?: GetApiGroupGroupIdAnnouncementsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAnnouncementsOut>> => {
    
    
    return axios.default.get(
      `/api/group/${groupId}/announcements`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiGroupGroupIdAnnouncementsQueryKey = (groupId: number,
    params?: GetApiGroupGroupIdAnnouncementsParams,) => {
    return [`/api/group/${groupId}/announcements`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiGroupGroupIdAnnouncementsQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError = AxiosError<HTTPError | ValidationError>>(groupId: number,
    params?: GetApiGroupGroupIdAnnouncementsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupGroupIdAnnouncementsQueryKey(groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>> = ({ signal }) => getApiGroupGroupIdAnnouncements(groupId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupGroupIdAnnouncementsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>>
export type GetApiGroupGroupIdAnnouncementsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâ‰∏Ä‰∏™Áæ§ÁªÑÁöÑÂÖ¨Âëä
 */

export function useGetApiGroupGroupIdAnnouncements<TData = Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError = AxiosError<HTTPError | ValidationError>>(
 groupId: number,
    params?: GetApiGroupGroupIdAnnouncementsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdAnnouncements>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupGroupIdAnnouncementsQueryOptions(groupId,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂä†Áæ§ËØ∑Ê±Ç
 */
export const getApiGroupGroupIdJoinRequests = (
    groupId: string,
    params?: GetApiGroupGroupIdJoinRequestsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGroupJoinRequestsOut>> => {
    
    
    return axios.default.get(
      `/api/group/${groupId}/join-requests`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiGroupGroupIdJoinRequestsQueryKey = (groupId: string,
    params?: GetApiGroupGroupIdJoinRequestsParams,) => {
    return [`/api/group/${groupId}/join-requests`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiGroupGroupIdJoinRequestsQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError = AxiosError<HTTPError | ValidationError>>(groupId: string,
    params?: GetApiGroupGroupIdJoinRequestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupGroupIdJoinRequestsQueryKey(groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>> = ({ signal }) => getApiGroupGroupIdJoinRequests(groupId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupGroupIdJoinRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>>
export type GetApiGroupGroupIdJoinRequestsQueryError = AxiosError<HTTPError | ValidationError>


/**
 * @summary Ëé∑ÂèñÊâÄÊúâÂä†Áæ§ËØ∑Ê±Ç
 */

export function useGetApiGroupGroupIdJoinRequests<TData = Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError = AxiosError<HTTPError | ValidationError>>(
 groupId: string,
    params?: GetApiGroupGroupIdJoinRequestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupGroupIdJoinRequests>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupGroupIdJoinRequestsQueryOptions(groupId,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÈÇÄËØ∑Â•ΩÂèãÂä†ÂÖ•Áæ§ÁªÑ
 */
export const postApiGroupGroupIdInviteTargetId = (
    groupId: string,
    targetId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<InviteGroupMemberOut>> => {
    
    
    return axios.default.post(
      `/api/group/${groupId}/invite/${targetId}`,undefined,options
    );
  }



export const getPostApiGroupGroupIdInviteTargetIdMutationOptions = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>, TError,{groupId: string;targetId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>, TError,{groupId: string;targetId: string}, TContext> => {

const mutationKey = ['postApiGroupGroupIdInviteTargetId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>, {groupId: string;targetId: string}> = (props) => {
          const {groupId,targetId} = props ?? {};

          return  postApiGroupGroupIdInviteTargetId(groupId,targetId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupGroupIdInviteTargetIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>>
    
    export type PostApiGroupGroupIdInviteTargetIdMutationError = AxiosError<HTTPError>

    /**
 * @summary ÈÇÄËØ∑Â•ΩÂèãÂä†ÂÖ•Áæ§ÁªÑ
 */
export const usePostApiGroupGroupIdInviteTargetId = <TError = AxiosError<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>, TError,{groupId: string;targetId: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroupGroupIdInviteTargetId>>,
        TError,
        {groupId: string;targetId: string},
        TContext
      > => {

      const mutationOptions = getPostApiGroupGroupIdInviteTargetIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    