/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AIOffice
 * OpenAPI spec version: 0.1.0
 */
export type ValidationErrorDetail = { [key: string]: unknown };

export interface ValidationError {
  detail?: ValidationErrorDetail;
  message?: string;
}

export type HTTPErrorDetail = { [key: string]: unknown };

export interface HTTPError {
  detail?: HTTPErrorDetail;
  message?: string;
}

export interface CreateUserIn {
  /**
   * @minLength 3
   * @maxLength 15
   */
  username: string;
  /**
   * @minLength 3
   * @maxLength 15
   */
  display_name: string;
  /**
   * @minLength 6
   * @maxLength 30
   */
  password: string;
  email: string;
  /**
   * @minLength 3
   * @maxLength 15
   */
  email_name: string;
}

export interface CreateUserOut {
  message?: string;
  access_token: string;
  refresh_token: string;
}

export interface UpdateUserInUpdate {
  message?: string;
  /**
   * @minLength 3
   * @maxLength 15
   */
  displayName?: string;
  /**
   * @minLength 3
   * @maxLength 15
   */
  phoneNumber?: string;
  /**
   * @minLength 6
   * @maxLength 30
   */
  bio?: string;
  avatarId?: number;
}

/**
 * @maxLength 9
 */
export type UpdateUserOutStatus = typeof UpdateUserOutStatus[keyof typeof UpdateUserOutStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserOutStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  BANNED: 'BANNED',
  PENDING: 'PENDING',
  DELETED: 'DELETED',
} as const;

/**
 * @maxLength 9
 */
export type UpdateUserOutRole = typeof UpdateUserOutRole[keyof typeof UpdateUserOutRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserOutRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  GUEST: 'GUEST',
  SYSTEM: 'SYSTEM',
} as const;

/**
 * @nullable
 */
export type UpdateUserOutSettings = unknown | null;

/**
 * @nullable
 */
export type UpdateUserOutExtraMetadata = unknown | null;

export interface UpdateUserOut {
  /** @maxLength 255 */
  password: string;
  /** @maxLength 20 */
  username: string;
  /** @maxLength 255 */
  displayName: string;
  /** @maxLength 255 */
  email: string;
  /**
   * @maxLength 20
   * @nullable
   */
  phoneNumber?: string | null;
  /** @nullable */
  bio?: string | null;
  /** @nullable */
  lastLoginAt?: number | null;
  /** @maxLength 9 */
  status: UpdateUserOutStatus;
  /** @maxLength 9 */
  role: UpdateUserOutRole;
  /** @nullable */
  settings?: UpdateUserOutSettings;
  /** @nullable */
  extra_metadata?: UpdateUserOutExtraMetadata;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
  readonly avatar_url?: unknown;
  readonly avatar?: unknown;
  readonly profile?: unknown;
  readonly stats?: unknown;
  readonly schedules_participated?: unknown;
  readonly announcements?: unknown;
  readonly groups?: unknown;
  readonly group_invites?: unknown;
  readonly email_account?: unknown;
  readonly activity_logs?: unknown;
  readonly friendships_as_user1?: unknown;
  readonly friendships_as_user2?: unknown;
  readonly sent_friend_requests?: unknown;
  readonly got_friend_requests?: unknown;
  readonly messages?: unknown;
  readonly conversations?: unknown;
  message?: string;
}

/**
 * @maxLength 9
 */
export type UserStatus = typeof UserStatus[keyof typeof UserStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  BANNED: 'BANNED',
  PENDING: 'PENDING',
  DELETED: 'DELETED',
} as const;

/**
 * @maxLength 9
 */
export type UserRole = typeof UserRole[keyof typeof UserRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  GUEST: 'GUEST',
  SYSTEM: 'SYSTEM',
} as const;

/**
 * @nullable
 */
export type UserSettings = unknown | null;

/**
 * @nullable
 */
export type UserExtraMetadata = unknown | null;

export interface User {
  /** @maxLength 255 */
  password: string;
  /** @maxLength 20 */
  username: string;
  /** @maxLength 255 */
  displayName: string;
  /** @maxLength 255 */
  email: string;
  /**
   * @maxLength 20
   * @nullable
   */
  phoneNumber?: string | null;
  /** @nullable */
  bio?: string | null;
  /** @nullable */
  lastLoginAt?: number | null;
  /** @maxLength 9 */
  status: UserStatus;
  /** @maxLength 9 */
  role: UserRole;
  /** @nullable */
  settings?: UserSettings;
  /** @nullable */
  extra_metadata?: UserExtraMetadata;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
  readonly avatar_url?: unknown;
  readonly avatar?: unknown;
  readonly profile?: unknown;
  readonly stats?: unknown;
  readonly schedules_participated?: unknown;
  readonly announcements?: unknown;
  readonly groups?: unknown;
  readonly group_invites?: unknown;
  readonly email_account?: unknown;
  readonly activity_logs?: unknown;
  readonly friendships_as_user1?: unknown;
  readonly friendships_as_user2?: unknown;
  readonly sent_friend_requests?: unknown;
  readonly got_friend_requests?: unknown;
  readonly messages?: unknown;
  readonly conversations?: unknown;
}

export interface PaginationOut {
  page?: number;
  per_page?: number;
  pages?: number;
  total?: number;
  current?: string;
  next?: string;
  prev?: string;
  first?: string;
  last?: string;
}

export interface GetUsersOut {
  message?: string;
  users?: User[];
  pagination?: PaginationOut;
}

export interface CreateGroupIn {
  /**
   * @minLength 0
   * @maxLength 10
   */
  name?: string;
}

export interface Group {
  /** @maxLength 255 */
  name: string;
  /**
   * @maxLength 512
   * @nullable
   */
  avatar?: string | null;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface CreateGroupOut {
  message?: string;
  group?: Group;
}

export interface SendEmailIn {
  subject: string;
  content: string;
  recipient: string;
}

export interface SendEmailOut {
  message?: string;
}

export interface GetUserGroupsOut {
  message?: string;
  groups?: Group[];
  pagination?: PaginationOut;
}

export interface Status {
  message?: string;
}

export interface Email {
  msg_id?: string;
  /** @nullable */
  subject?: string | null;
  /** @nullable */
  content?: string | null;
  sender: string;
  recipient: string;
  /** @nullable */
  isRead?: boolean | null;
  /** @nullable */
  isArchived?: boolean | null;
  /** @nullable */
  isSpam?: boolean | null;
  /** @nullable */
  isTrashed?: boolean | null;
  /** @nullable */
  tags?: string[] | null;
  /** @nullable */
  categories?: string[] | null;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetEmailsOut {
  message?: string;
  emails?: Email[];
  PaginationOutSchema?: PaginationOut;
}

export interface Friend {
  user1Id: number;
  user2Id: number;
  /** @nullable */
  lastInteractionAt?: number | null;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetFriendsOut {
  message?: string;
  as_user1?: Friend[];
  as_user2?: Friend[];
}

export interface SendCodeIn {
  email: string;
}

export interface SendCodeOut {
  message?: string;
}

export interface LoginIn {
  /**
   * @minLength 3
   * @maxLength 15
   */
  username: string;
  /**
   * @minLength 6
   * @maxLength 30
   */
  password: string;
}

export interface LoginOut {
  message?: string;
  access_token: string;
  refresh_token: string;
}

export interface UploadAvatarIn {
  file?: Blob;
}

/**
 * @maxLength 8
 */
export type FileType = typeof FileType[keyof typeof FileType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FileType = {
  image: 'image',
  video: 'video',
  audio: 'audio',
  document: 'document',
  archive: 'archive',
  other: 'other',
} as const;

export interface File {
  /** @maxLength 255 */
  name: string;
  /** @maxLength 8 */
  type: FileType;
  size: number;
  /** @maxLength 100 */
  mime_type: string;
  /** @maxLength 20 */
  extension: string;
  /** @maxLength 512 */
  path: string;
  /**
   * @maxLength 512
   * @nullable
   */
  url?: string | null;
  /** @maxLength 32 */
  md5: string;
  /** @nullable */
  is_public?: boolean | null;
  /** @nullable */
  is_knowledge_file?: boolean | null;
  /** @nullable */
  is_department?: boolean | null;
  /** @nullable */
  width?: number | null;
  /** @nullable */
  height?: number | null;
  /** @nullable */
  duration?: number | null;
  /**
   * @maxLength 512
   * @nullable
   */
  thumbnail?: string | null;
  /**
   * @maxLength 50
   * @nullable
   */
  encoding?: string | null;
  /** @nullable */
  last_viewed?: string | null;
  /** @nullable */
  view_count?: number | null;
  /** @nullable */
  download_count?: number | null;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface UploadAvatarOut {
  message?: string;
  file?: File;
}

export interface Department {
  id?: number;
  /** @maxLength 100 */
  name: string;
  /**
   * @maxLength 500
   * @nullable
   */
  description?: string | null;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetDepartmentsOut {
  message?: string;
  departments?: Department[];
  pagination?: PaginationOut;
}

export interface CreateDepartmentInUpdate {
  name?: string;
  /** @nullable */
  parentId?: number | null;
  description?: string;
}

export interface CreateDepartmentOut {
  message?: string;
  department?: Department;
}

export interface RefreshTokenOut {
  message?: string;
  access_token: string;
}

/**
 * @maxLength 6
 */
export type ConversationType = typeof ConversationType[keyof typeof ConversationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConversationType = {
  ai: 'ai',
  group: 'group',
  friend: 'friend',
} as const;

export interface Conversation {
  /** @nullable */
  from?: string | null;
  /** @maxLength 255 */
  displayName: string;
  /**
   * @maxLength 255
   * @nullable
   */
  recentMessage?: string | null;
  /** @maxLength 6 */
  type: ConversationType;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
  readonly members?: unknown;
  readonly groups?: unknown;
  readonly friends?: unknown;
  readonly messages?: unknown;
  readonly conversation_members?: unknown;
  readonly ai_settings?: unknown;
}

export interface GetConversationsOut {
  message?: string;
  conversations?: Conversation[];
}

export interface ChangePasswordIn {
  current_password: string;
  new_password: string;
}

export interface ChangePasswordOut {
  message?: string;
}

export interface ReceiveEmailIn {
  email_name: string;
  subject: string;
  content: string;
  recipient: string;
  sender: string;
  msg_id: string;
}

export interface ReceiveEmailOut {
  message?: string;
}

export interface EmailAccount {
  /** @maxLength 255 */
  emailName: string;
  /** @nullable */
  canReceiveOtherDomain?: boolean | null;
  /** @nullable */
  doNotice?: boolean | null;
  /** @nullable */
  favoriteEmails?: number[] | null;
  /** @nullable */
  categories?: string[] | null;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetEmailAccountOut {
  message?: string;
  email_account?: EmailAccount;
}

export interface UpdateEmailInUpdate {
  canReceiveOtherDomain?: boolean;
  doNotice?: boolean;
  categories?: string[];
  tags?: string[];
}

export interface UpdateEmailOut {
  message?: string;
}

export interface SearchEmailsOut {
  message?: string;
  emails?: Email[];
  pagination?: PaginationOut;
}

export interface UploadKnowledgeIn {
  file?: Blob;
  isPublic?: boolean;
  isKnowledgeFile?: boolean;
  isDepartment?: boolean;
}

export interface UploadKnowledgeOut {
  message?: string;
  file?: File;
}

export interface Generated {
  message?: string;
}

export interface CreateAIConversationInUpdate {
  /** AIÂØπËØùÁöÑÊòæÁ§∫ÂêçÁß∞ */
  displayName?: string;
}

export interface AIConversationOut {
  conversation?: Conversation;
}

/**
 * @maxLength 8
 */
export type FriendRequestStatus = typeof FriendRequestStatus[keyof typeof FriendRequestStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FriendRequestStatus = {
  waiting: 'waiting',
  approved: 'approved',
  rejected: 'rejected',
} as const;

export interface FriendRequest {
  requesterId: number;
  targetId: number;
  /** @maxLength 512 */
  introduction: string;
  /** @maxLength 8 */
  status: FriendRequestStatus;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetFriendRequestsOut {
  message?: string;
  sent_friend_requests?: FriendRequest[];
  got_friend_requests?: FriendRequest[];
}

export interface AIConversationsOut {
  conversations: Conversation[];
}

export interface LoginByEmailIn {
  email: string;
  code: number;
}

export interface GetGroupOut {
  message?: string;
  group?: Group;
}

export interface GroupUpdate {
  /** @maxLength 255 */
  name?: string;
  /**
   * @maxLength 512
   * @nullable
   */
  avatar?: string | null;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface UpdateGroupOut {
  message?: string;
  group?: Group;
}

export interface DeleteGroupOut {
  message?: string;
}

export interface GetFriendOut {
  message?: string;
  friend?: Friend;
}

export interface CheckAvailabilityOut {
  message?: string;
  is_available: boolean;
  field: string;
}

/**
 * @maxLength 6
 */
export type GroupMemberRole = typeof GroupMemberRole[keyof typeof GroupMemberRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupMemberRole = {
  agent: 'agent',
  admin: 'admin',
  member: 'member',
  owner: 'owner',
} as const;

export interface GroupMember {
  userId: number;
  groupId: number;
  /**
   * @maxLength 255
   * @nullable
   */
  displayName?: string | null;
  /** @maxLength 6 */
  role: GroupMemberRole;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetGroupMembersOut {
  message?: string;
  members?: GroupMember[];
}

export interface GroupJoinRequest { [key: string]: unknown }

export interface GetGroupJoinRequestsOut {
  message?: string;
  requests?: GroupJoinRequest[];
  pagination?: PaginationOut;
}

export interface HandleGroupJoinRequestOut {
  message?: string;
}

export interface AddTagsIn {
  tags: string[];
}

export interface MessageOnly {
  message?: string;
}

export interface MarkSpamIn {
  spam: boolean;
}

export interface ChangeFilePermissionsIn {
  userId: string;
  /** ÊòØÂê¶‰∏∫Áü•ËØÜÂ∫ìÊñá‰ª∂ */
  isKnowledgeFile: boolean;
  /** Áü•ËØÜÂ∫ìÊñá‰ª∂ÁöÑÊùÉÈôêËåÉÂõ¥ÔºöPRIVATE„ÄÅPUBLIC„ÄÅDEPARTMENT */
  type: string;
}

export interface ChangeFilePermissionsOut {
  message?: string;
  file?: File;
}

export interface TrashEmailIn {
  trash: boolean;
}

export interface ReplyEmailIn {
  email_id: number;
  content: string;
}

export interface ReplyEmailOut {
  message?: string;
}

export interface ArchiveEmailIn {
  archive: boolean;
}

export interface CreateAnnouncementIn {
  /**
   * @minLength 0
   * @maxLength 10
   */
  title: string;
  /**
   * @minLength 0
   * @maxLength 255
   */
  content: string;
}

export interface GroupAnnouncement {
  authorId: number;
  /** @maxLength 255 */
  title: string;
  content: string;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface CreateAnnouncementOut {
  message?: string;
  announcement?: GroupAnnouncement;
}

export interface DeleteAnnouncementOut {
  message?: string;
}

export interface SubmitGroupJoinRequestOut {
  message?: string;
}

export interface SubmitFriendRequestIn {
  introduction?: string;
}

export interface SubmitFriendRequestOut {
  message?: string;
}

export interface GetAnnouncementsOut {
  message?: string;
  announcements?: GroupAnnouncement[];
  pagination?: PaginationOut;
}

export type HandleFriendRequestInStatus = typeof HandleFriendRequestInStatus[keyof typeof HandleFriendRequestInStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandleFriendRequestInStatus = {
  approved: 'approved',
  rejected: 'rejected',
} as const;

export interface HandleFriendRequestIn {
  status?: HandleFriendRequestInStatus;
}

export interface HandleFriendRequestOut {
  message?: string;
}

export interface UpdateDepartmentIn {
  name?: string;
  parentId?: number;
  description?: string;
}

export interface UpdateDepartmentOut {
  message?: string;
  department?: Department;
}

export interface GetConversationOut {
  message?: string;
  conversation?: Conversation;
}

export interface InviteGroupMemberOut {
  message?: string;
}

export interface UpdateAIConversationIn {
  /** Êñ∞ÁöÑAIÂØπËØùÊòæÁ§∫ÂêçÁß∞ */
  displayName: string;
}

export interface DeleteAIConversationsOut {
  message?: string;
}

export interface DepartmentMember {
  userId: number;
  /** @maxLength 20 */
  role?: string;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetDepartmentMembersOut {
  message?: string;
  members?: DepartmentMember[];
  pagination?: PaginationOut;
}

export type AddDepartmentMemberInRole = typeof AddDepartmentMemberInRole[keyof typeof AddDepartmentMemberInRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddDepartmentMemberInRole = {
  admin: 'admin',
  member: 'member',
} as const;

export interface AddDepartmentMemberIn {
  userId: number;
  role?: AddDepartmentMemberInRole;
}

export interface AddDepartmentMemberOut {
  message?: string;
  member?: DepartmentMember;
}

export type PostMessageInType = typeof PostMessageInType[keyof typeof PostMessageInType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostMessageInType = {
  text: 'text',
  stream: 'stream',
  image: 'image',
  file: 'file',
} as const;

export interface PostMessageIn {
  type: PostMessageInType;
  content: string;
  /** @nullable */
  fileId?: number | null;
}

export interface PostMessageOut {
  message?: string;
}

/**
 * @maxLength 6
 */
export type MessageType = typeof MessageType[keyof typeof MessageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageType = {
  text: 'text',
  stream: 'stream',
  image: 'image',
  file: 'file',
} as const;

export interface Message {
  conversationId: number;
  userId: number;
  /** @nullable */
  fileId?: number | null;
  /** @maxLength 6 */
  type: MessageType;
  /** @nullable */
  content?: string | null;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetMessagesOut {
  message?: string;
  messages?: Message[];
}

export interface AIConversationSettings {
  conversationId: number;
  /** @nullable */
  knowledge?: boolean | null;
  /** @nullable */
  agent?: boolean | null;
  id?: number;
  /** @nullable */
  createAt?: string | null;
  /** @nullable */
  updateAt?: string | null;
}

export interface GetAIConversationSettingsOut {
  message?: string;
  settings?: AIConversationSettings;
}

export interface UpdateAIConversationSettingsIn {
  /** Áü•ËØÜÂ∫ìËÆæÁΩÆ */
  knowledge?: boolean;
  /** Êô∫ËÉΩ‰ΩìËÆæÁΩÆ */
  agent?: boolean;
}

export interface UpdateAIConversationSettingsOut {
  message?: string;
  settings?: AIConversationSettings;
}

export type UpdateDepartmentMemberRoleInRole = typeof UpdateDepartmentMemberRoleInRole[keyof typeof UpdateDepartmentMemberRoleInRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDepartmentMemberRoleInRole = {
  admin: 'admin',
  member: 'member',
} as const;

export interface UpdateDepartmentMemberRoleIn {
  role?: UpdateDepartmentMemberRoleInRole;
}

export type GetApiUsersParams = {
page?: number;
per_page?: number;
};

export type GetApiGroupsParams = {
page?: number;
per_page?: number;
};

export type GetApiEmailsParams = {
page?: number;
per_page?: number;
type?: string;
category?: string;
};

export type GetApiDepartmentsParams = {
page?: number;
per_page?: number;
};

export type GetApiUsersSearchParams = {
page?: number;
per_page?: number;
query: string;
};

export type GetApiEmailsSearchParams = {
page?: number;
per_page?: number;
search_query: string;
};

export type GetApiFileFileIdParams = {
download?: boolean;
};

export type GetApiUserCheckAvailabilityParams = {
username?: string;
email?: string;
email_name?: string;
};

export type GetApiManageableJoinRequestsParams = {
page?: number;
per_page?: number;
};

export type PutApiJoinRequestRequestIdParams = {
status?: PutApiJoinRequestRequestIdStatus;
};

export type PutApiJoinRequestRequestIdStatus = typeof PutApiJoinRequestRequestIdStatus[keyof typeof PutApiJoinRequestRequestIdStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutApiJoinRequestRequestIdStatus = {
  approved: 'approved',
  rejected: 'rejected',
} as const;

export type GetApiGroupGroupIdAnnouncementsParams = {
page?: number;
per_page?: number;
};

export type GetApiGroupGroupIdJoinRequestsParams = {
page?: number;
per_page?: number;
};

export type GetApiDepartmentsDepartmentIdMembersParams = {
page?: number;
per_page?: number;
};

